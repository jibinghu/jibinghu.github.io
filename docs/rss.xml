<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>ZOMBIE_</title><link>https://jibinghu.github.io</link><description>我可能当不了绝世高手</description><copyright>ZOMBIE_</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://q6.itc.cn/q_70/images01/20240415/2cdb0abd9b724802baff3b9199d3fbc4.jpeg</url><title>avatar</title><link>https://jibinghu.github.io</link></image><lastBuildDate>Sun, 26 Oct 2025 02:57:57 +0000</lastBuildDate><managingEditor>ZOMBIE_</managingEditor><ttl>60</ttl><webMaster>ZOMBIE_</webMaster><item><title>C++ 将亡值</title><link>https://jibinghu.github.io/post/C%2B%2B%20-jiang-wang-zhi.html</link><description>C++中的“将亡值”（xvalue，eXpiring value）是**一种特殊的右值**，指那些生命周期即将结束、资源可以被安全“窃取”的对象。</description><guid isPermaLink="true">https://jibinghu.github.io/post/C%2B%2B%20-jiang-wang-zhi.html</guid><pubDate>Sun, 26 Oct 2025 02:57:17 +0000</pubDate></item><item><title>dp = [0 for _ in range(size)] 等价 &lt;==&gt; cpp 中数组</title><link>https://jibinghu.github.io/post/dp%20%3D%20%5B0%20for%20_%20in%20range%28size%29%5D%20-deng-jia-%20-%3D%3D-%20cpp%20-zhong-shu-zu.html</link><description>在 C++ 中，与 Python 的 `dp = [0 for _ in range(size)]` 功能等价的代码是创建一个长度为 `size`、所有元素初始化为 `0` 的数组或容器。</description><guid isPermaLink="true">https://jibinghu.github.io/post/dp%20%3D%20%5B0%20for%20_%20in%20range%28size%29%5D%20-deng-jia-%20-%3D%3D-%20cpp%20-zhong-shu-zu.html</guid><pubDate>Wed, 22 Oct 2025 04:51:02 +0000</pubDate></item><item><title>emplace_back 和 push_back 区别</title><link>https://jibinghu.github.io/post/emplace_back%20-he-%20push_back%20-qu-bie.html</link><description>&lt;code inline=''&gt;emplace_back&lt;/code&gt; 和 &lt;code inline=''&gt;push_back&lt;/code&gt; 是 C++ 容器（比如 &lt;code inline=''&gt;std::vector&lt;/code&gt;、&lt;code inline=''&gt;std::list&lt;/code&gt; 等）里常用的两个插入函数。</description><guid isPermaLink="true">https://jibinghu.github.io/post/emplace_back%20-he-%20push_back%20-qu-bie.html</guid><pubDate>Fri, 17 Oct 2025 08:48:55 +0000</pubDate></item><item><title>每个进程最多能开多少线程</title><link>https://jibinghu.github.io/post/mei-ge-jin-cheng-zui-duo-neng-kai-duo-shao-xian-cheng.html</link><description>“每个进程最多能开多少线程”并不是一个固定常数，通常由多重限制共同决定：

用户/进程的任务数限制（把线程也当成 task/process 计数）
线程栈大小占用的虚拟内存
系统级最大线程数 / pid 数
cgroup / 容器的 pids 限制
可映射内存页上限（Linux 的 vm.max_map_count）

``` bash
# 当前 shell 的用户级“最大进程数”（线程也算），影响同一用户下总 task 数
ulimit -u

# 查看某个进程的 RLIMIT（含 Max processes, Max address space 等）
cat /proc/&lt;PID&gt;/limits

# 系统最大线程（task）总数
cat /proc/sys/kernel/threads-max

# 系统可分配的最大 PID（上限影响可创建 task 的数量级）
cat /proc/sys/kernel/pid_max

# cgroup（容器/服务）对 PIDs 的限制（无限为 'max'）
cat /sys/fs/cgroup/pids.max 2&gt;/dev/null || true
```

``` cpp
# 主线程栈软限制（不是 pthread 默认值，但有参考意义）
ulimit -s

# 最小线程栈（pthread 的保底值）
getconf PTHREAD_STACK_MIN

# 可映射内存区域上限（map 数太多也会失败）
cat /proc/sys/vm/max_map_count

# 当前进程的线程数
grep ^Threads: /proc/$$/status

# 物理/可用内存概览（仅用于粗略估算）
grep -E 'MemTotal|MemAvailable' /proc/meminfo
```。</description><guid isPermaLink="true">https://jibinghu.github.io/post/mei-ge-jin-cheng-zui-duo-neng-kai-duo-shao-xian-cheng.html</guid><pubDate>Fri, 17 Oct 2025 06:06:58 +0000</pubDate></item><item><title>fv3 new transplant</title><link>https://jibinghu.github.io/post/fv3%20new%20transplant.html</link><description>&gt; https://zhuanlan.zhihu.com/p/75720006

对 fv3 的 tracer 模块准备详细认真重构一下，几点原因：

1. tracer 模块足够小，可以通过多重输入格式来进行模拟
2. suzitong 的代码还是有可读性的，包括 `https://noaa-emc.github.io/FV3_Dycore_ufs-v2.0.0/html/fv__mapz_8F90_source.html` 的源代码与师兄的代码的不同之处是为什么。</description><guid isPermaLink="true">https://jibinghu.github.io/post/fv3%20new%20transplant.html</guid><pubDate>Tue, 14 Oct 2025 03:47:04 +0000</pubDate></item><item><title>3. 无重复字符的最长子串</title><link>https://jibinghu.github.io/post/3.%20-wu-zhong-fu-zi-fu-de-zui-chang-zi-chuan.html</link><description>&gt; https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/

python

``` python
class Solution:
    def lengthOfLongestSubstring(self, s: str) -&gt; int:
        # 滑动窗口 [a, b] 确定当前窗口中无重复字符的长度
        # hash 表保存当前窗口字符及位置并匹配， max_num 记录当前最大值
        if s == '':
            return 0
        elif len(s) == 1:
            return 1

        hash = []
        a,b = 0,0
        max_num = 0
        hash.append(s[0])
        nums = len(s)
        while b &lt; nums - 1:
            # 如果下一位字符不在hash表内，b+=1
            # 否则 a 跳转至hash中字符位置
            if s[b+1] in hash:
                tmp = hash.index(s[b+1])
                hash = hash[tmp + 1:]
                b += 1
                hash.append(s[b])
            else:
                hash.append(s[b+1])
                b += 1
            max_num = max_num if max_num&gt;= len(hash) else len(hash)
        return max_num

s = Solution()
print(s.lengthOfLongestSubstring('pwwkew'))
```

cpp

``` cpp
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
using namespace std;

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(!s.size()){
            return 0;
        }
        else if(s.size() == 1){
            return 1;
        }

        vector&lt;char&gt; hash = {};
        int a = 0, b = 0;
        int max_num = 0;
        hash.push_back(s[0]);
        int nums = s.size();
        while(b &lt; nums - 1){
            auto it = find(hash.begin(), hash.end(), s[b+1]);
            if(it != hash.end()){
                int tmp = it - hash.begin();
                hash.erase(hash.begin(), hash.begin() + tmp + 1);
                b++;
                hash.push_back(s[b]);
            }
            else{
                hash.push_back(s[b+1]);
                b++;
            }
            max_num = max_num&gt;=hash.size() ? max_num : hash.size();
        }
        return max_num;
    }
};
```

注意 find 是 #include &lt;algorithm&gt; 的函数，不是 std::vector 的成员函数；另外 vector.erase(vector.begin(), vector.end(), target) 可以相当于 python 的切片。</description><guid isPermaLink="true">https://jibinghu.github.io/post/3.%20-wu-zhong-fu-zi-fu-de-zui-chang-zi-chuan.html</guid><pubDate>Mon, 13 Oct 2025 12:45:55 +0000</pubDate></item><item><title>ldmatrix</title><link>https://jibinghu.github.io/post/ldmatrix.html</link><description>
&lt;hr&gt;
&lt;h1&gt;是什么&lt;/h1&gt;
&lt;p&gt;&lt;code inline=''&gt;ldmatrix.sync&lt;/code&gt; 是 &lt;strong&gt;按 warp 协作&lt;/strong&gt;、从 &lt;strong&gt;shared memory&lt;/strong&gt; 中一次性读取 &lt;strong&gt;8×8 的矩阵 tile&lt;/strong&gt; 到寄存器的指令，用来给 Tensor Core 的矩阵乘（&lt;code inline=''&gt;mma.sync&lt;/code&gt; / &lt;code inline=''&gt;mma.sp.sync&lt;/code&gt; 等）准备操作数 &lt;strong&gt;fragment&lt;/strong&gt;。</description><guid isPermaLink="true">https://jibinghu.github.io/post/ldmatrix.html</guid><pubDate>Sun, 05 Oct 2025 09:07:57 +0000</pubDate></item><item><title>cuda 优化笔记（非常原始）</title><link>https://jibinghu.github.io/post/cuda%20-you-hua-bi-ji-%EF%BC%88-fei-chang-yuan-shi-%EF%BC%89.html</link><description># __fdividef

```cpp
sd3_float frac = __fdividef(1.0f, (sd3_float)ksp_in(k));
```

---

### 1. `__fdividef` 是什么？

* 这是 **CUDA 提供的设备端内置函数**（intrinsic），只能在 GPU 代码中使用。</description><guid isPermaLink="true">https://jibinghu.github.io/post/cuda%20-you-hua-bi-ji-%EF%BC%88-fei-chang-yuan-shi-%EF%BC%89.html</guid><pubDate>Sun, 05 Oct 2025 06:17:09 +0000</pubDate></item><item><title>NVIDIA Tesla V100 参数(CUDA 用)</title><link>https://jibinghu.github.io/post/NVIDIA%20Tesla%20V100%20-can-shu-%28CUDA%20-yong-%29.html</link><description>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;

&lt;p&gt;NVIDIA Tesla V100（Volta 架构，Compute Capability = 7.0）的比较全面的硬件／资源参数汇总：&lt;/p&gt;
&lt;hr&gt;

&lt;h2&gt;基本架构参数&lt;/h2&gt;
&lt;table border='1' cellpadding='4' cellspacing='0'&gt;
  &lt;tr&gt;&lt;th&gt;项目&lt;/th&gt;&lt;th&gt;数值 / 描述&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;架构 / 代号&lt;/td&gt;&lt;td&gt;Volta / GV100 :contentReference[oaicite:0]{index=0}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;完整 GV100 芯片的 SM 总数&lt;/td&gt;&lt;td&gt;84 个 SM :contentReference[oaicite:1]{index=1}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;在实际 V100 上启用的 SM 数目&lt;/td&gt;&lt;td&gt;80 个 SM（部分禁用以提高良品率）:contentReference[oaicite:2]{index=2}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;每 SM 的计算单元组成&lt;/td&gt;
    &lt;td&gt;64 个 FP32 核心 + 32 个 FP64 核心 + 64 个 INT32 核心 + 8 个 Tensor Core :contentReference[oaicite:3]{index=3}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;各种核之间并行执行能力&lt;/td&gt;&lt;td&gt;FP32 和 INT32 指令可并行发射（因它们有独立资源）:contentReference[oaicite:4]{index=4}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;GPU 全局 L2 缓存&lt;/td&gt;&lt;td&gt;6,144 KB（6 MB）:contentReference[oaicite:5]{index=5}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;HBM2 显存带宽（峰值）&lt;/td&gt;&lt;td&gt;约 900 GB/s（标准版本）:contentReference[oaicite:6]{index=6}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;显存容量&lt;/td&gt;&lt;td&gt;通常 16 GB 或 32 GB HBM2（不同型号）:contentReference[oaicite:7]{index=7}&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;hr&gt;

&lt;h2&gt;SM 级资源 / 线程 / 寄存器 / 共享内存 限制&lt;/h2&gt;
&lt;table border='1' cellpadding='4' cellspacing='0'&gt;
  &lt;tr&gt;&lt;th&gt;资源类型&lt;/th&gt;&lt;th&gt;限制 / 说明&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;最大并发 warp 数&lt;/td&gt;&lt;td&gt;64 个 warp（即 64 × 32 = 2048 线程）:contentReference[oaicite:8]{index=8}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;最大并发线程数／SM&lt;/td&gt;&lt;td&gt;2,048 线程 :contentReference[oaicite:9]{index=9}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;最大并发线程块（resident blocks）／SM&lt;/td&gt;&lt;td&gt;32 个线程块 :contentReference[oaicite:10]{index=10}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;线程块最大线程数&lt;/td&gt;&lt;td&gt;1,024 线程 :contentReference[oaicite:11]{index=11}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;寄存器总数（32-bit 寄存器）／SM&lt;/td&gt;&lt;td&gt;65,536 个（即 64K）:contentReference[oaicite:12]{index=12}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;每线程最大寄存器数&lt;/td&gt;&lt;td&gt;255 个 32-bit 寄存器 :contentReference[oaicite:13]{index=13}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;线程块可使用的最大寄存器总数&lt;/td&gt;&lt;td&gt;最高可达 65,536 个寄存器（即一个 block 理论上可动用 SM 全部寄存器）:contentReference[oaicite:14]{index=14}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;共享内存 + L1 缓存 合并空间&lt;/td&gt;&lt;td&gt;每 SM 最多可配置 96 KB（共享内存 + L1 混合）:contentReference[oaicite:15]{index=15}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;单个线程块可用共享内存上限&lt;/td&gt;&lt;td&gt;理论上可使用全部 96 KB（如果该 block 占用全部共享内存）:contentReference[oaicite:16]{index=16}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;默认静态共享内存限制&lt;/td&gt;&lt;td&gt;静态分配通常受限为 48 KB，若超过则需动态分配机制 :contentReference[oaicite:17]{index=17}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;SM 分区 / 内部结构&lt;/td&gt;&lt;td&gt;每 SM 被划分为 4 个 partition（每个 partition 有自己的调度器 / 指令缓存 L0 / 部分资源）:contentReference[oaicite:18]{index=18}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;每个 partition 的寄存器文件&lt;/td&gt;&lt;td&gt;每个 partition 有约 64 KB 的寄存器空间（即 SM 的寄存器空间被划分给 4 个分区）:contentReference[oaicite:19]{index=19}&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;hr&gt;

&lt;h2&gt;不同精度 / Tensor Core 吞吐能力&lt;/h2&gt;
&lt;table border='1' cellpadding='4' cellspacing='0'&gt;
  &lt;tr&gt;&lt;th&gt;精度 / 类型&lt;/th&gt;&lt;th&gt;理论峰值算力 / 吞吐&lt;/th&gt;&lt;th&gt;说明 / 备注&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;FP64（双精度）&lt;/td&gt;&lt;td&gt;约 7.8 TFLOPS（在 SXM / GV100 版本）:contentReference[oaicite:20]{index=20}&lt;/td&gt;&lt;td&gt;每 SM 有 32 个 FP64 核心&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;FP32（单精度）&lt;/td&gt;&lt;td&gt;约 15.7 TFLOPS（Boost 时钟下）:contentReference[oaicite:21]{index=21}&lt;/td&gt;&lt;td&gt;标准 CUDA 核心用于标量浮点运算&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Tensor / 混合精度（FP16 输入 + FP32 累加）&lt;/td&gt;&lt;td&gt;125 TFLOPS（混合精度 Tensor 运算）:contentReference[oaicite:22]{index=22}&lt;/td&gt;&lt;td&gt;全卡共有 640 个 Tensor Core（每 SM 8 个）:contentReference[oaicite:23]{index=23}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;普通 FP16（非 Tensor 运算）&lt;/td&gt;&lt;td&gt;理论上可接近 FP32 的 2×，但不常用作主路径&lt;/td&gt;&lt;td&gt;Volta 架构主要通过 Tensor Core 加速矩阵运算，对标量 FP16 支持有限&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;关于 Tensor Core 的设计细节：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;每个 SM 拥有 8 个 Tensor Core → 全卡共 640 个 :contentReference[oaicite:24]{index=24}&lt;/li&gt;
  &lt;li&gt;每个 Tensor Core 在一个时钟周期内可执行一次 4×4 矩阵乘加 (即 D = A×B + C) :contentReference[oaicite:25]{index=25}&lt;/li&gt;
  &lt;li&gt;单个 Tensor Core 每周期可执行 64 个 FMA 操作（乘加对） → 每 SM 的 8 个 Tensor Core 共 512 FMA（或 1024 个浮点运算） :contentReference[oaicite:26]{index=26}&lt;/li&gt;
  &lt;li&gt;理论上，整卡的 Tensor 运算峰值为 125 TFLOPS 混合精度 :contentReference[oaicite:27]{index=27}&lt;/li&gt;
  &lt;li&gt;在实际测得的性能中，使用 cuBLAS 等优化库时可达 ~83 TFLOPS 混合精度水平（比理论峰值低一些）:contentReference[oaicite:28]{index=28}&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2&gt;子结构 / 缓存 / 内存 / 带宽 等&lt;/h2&gt;
&lt;table border='1' cellpadding='4' cellspacing='0'&gt;
  &lt;tr&gt;&lt;th&gt;子系统&lt;/th&gt;&lt;th&gt;参数 / 大小 / 吞吐&lt;/th&gt;&lt;th&gt;说明 / 备注&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;L2 缓存&lt;/td&gt;&lt;td&gt;6,144 KB（6 MB）:contentReference[oaicite:29]{index=29}&lt;/td&gt;&lt;td&gt;整卡共享，用于跨 SM 缓存加速&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;共享内存 + L1 混合空间&lt;/td&gt;&lt;td&gt;每 SM 最多可配置 96 KB :contentReference[oaicite:30]{index=30}&lt;/td&gt;&lt;td&gt;Volta 架构中共享内存与 L1 缓存资源是可配置混合使用的&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;静态共享内存（__shared__）&lt;/td&gt;&lt;td&gt;通常上限 48 KB，超过部分需动态分配&lt;/td&gt;&lt;td&gt;编译器 / 运行时可能根据资源优化做调整 :contentReference[oaicite:31]{index=31}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;访存带宽（HBM2）&lt;/td&gt;&lt;td&gt;约 900 GB/s（标准版本）:contentReference[oaicite:32]{index=32}&lt;/td&gt;&lt;td&gt;部分 V100S / SXM 型号带宽更高（如 1134 GB/s）:contentReference[oaicite:33]{index=33}&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;显存容量&lt;/td&gt;&lt;td&gt;16 GB 或 32 GB HBM2（具体型号不同）:contentReference[oaicite:34]{index=34}&lt;/td&gt;&lt;td&gt;支持 ECC（错误检测与修正）&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;NVLink / 接口带宽&lt;/td&gt;&lt;td&gt;在 NVLink 型号下可达高带宽互联，PCIe 型号受 PCIe 总线限制 :contentReference[oaicite:35]{index=35}&lt;/td&gt;&lt;td&gt;NVLink 型号互联带宽可达数百 GB/s&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;L0 / 指令缓存 / 调度单元&lt;/td&gt;&lt;td&gt;每 SM 划分为多个 partition（通常 4 个），每个有自己的指令缓存（L0）和调度单元 :contentReference[oaicite:36]{index=36}&lt;/td&gt;&lt;td&gt;此结构可减少资源冲突、提高并行度&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;线程调度 / 独立线程执行&lt;/td&gt;&lt;td&gt;Volta 支持 Independent Thread Scheduling，warp 内线程可相对独立调度 / 同步（`__syncwarp()`）:contentReference[oaicite:37]{index=37}&lt;/td&gt;&lt;td&gt;增加了调度灵活性&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;hr&gt;

&lt;h2&gt;限制 / 资源约束（回顾 + 补充）&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;每 SM 最大线程数：2,048（即 64 个 warp）:contentReference[oaicite:38]{index=38}&lt;/li&gt;
  &lt;li&gt;每 SM 最大并发线程块数：32 个 block :contentReference[oaicite:39]{index=39}&lt;/li&gt;
  &lt;li&gt;每线程块（block）最大线程数：1,024 线程 :contentReference[oaicite:40]{index=40}&lt;/li&gt;
  &lt;li&gt;每线程最大寄存器数：255 个（32-bit）:contentReference[oaicite:41]{index=41}&lt;/li&gt;
  &lt;li&gt;每 SM 寄存器总量：65,536 个（32-bit）:contentReference[oaicite:42]{index=42}&lt;/li&gt;
  &lt;li&gt;每线程块可使用的最大寄存器总数：理论上可动用 SM 全部寄存器（65,536 个）:contentReference[oaicite:43]{index=43}&lt;/li&gt;
  &lt;li&gt;线程块的最大维度（CUDA API 限制）：通常单 block 最多 1024 线程，各维度不超过 1024 等（具体依 CUDA 版本）&lt;/li&gt;
  &lt;li&gt;共享内存 / L1 空间总量可配置（如前所述）&lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;&lt;/html&gt;
。</description><guid isPermaLink="true">https://jibinghu.github.io/post/NVIDIA%20Tesla%20V100%20-can-shu-%28CUDA%20-yong-%29.html</guid><pubDate>Thu, 02 Oct 2025 06:47:25 +0000</pubDate></item><item><title>深度学习attention机制中的Q,K,V 解释</title><link>https://jibinghu.github.io/post/shen-du-xue-xi-attention-ji-zhi-zhong-de-Q%2CK%2CV%20-jie-shi.html</link><description>参考：https://www.zhihu.com/question/325839123/answer/1945590592194191583

说的挺有道理的：

&lt;img width='673' height='417' alt='Image' src='https://github.com/user-attachments/assets/750bc08c-04ec-47a7-9e2b-e7b02f1e843e' /&gt;

&lt;img width='674' height='425' alt='Image' src='https://github.com/user-attachments/assets/73cf1baf-5d60-4814-9643-71b03945cbab' /&gt;。</description><guid isPermaLink="true">https://jibinghu.github.io/post/shen-du-xue-xi-attention-ji-zhi-zhong-de-Q%2CK%2CV%20-jie-shi.html</guid><pubDate>Mon, 29 Sep 2025 09:46:42 +0000</pubDate></item><item><title>Ubuntu 服务器上禁止密码登录、只允许公钥登录</title><link>https://jibinghu.github.io/post/Ubuntu%20-fu-wu-qi-shang-jin-zhi-mi-ma-deng-lu-%E3%80%81-zhi-yun-xu-gong-yao-deng-lu.html</link><description>在 Ubuntu 服务器上禁止密码登录、只允许公钥登录，可以按照以下步骤操作：

---

## 1. 修改 SSH 配置文件

编辑 `/etc/ssh/sshd_config` 文件：

```bash
sudo nano /etc/ssh/sshd_config
```

找到并修改（或新增）以下配置：

```ini
# 禁止密码登录
PasswordAuthentication no

# 确保启用公钥认证
PubkeyAuthentication yes

# 可选：禁止 root 用户远程登录（推荐）
PermitRootLogin no
```

---

## 2. 重启 SSH 服务

保存后，重启 SSH 服务使配置生效：

```bash
sudo systemctl restart ssh
```

---

## 3. 确保公钥已配置

在你要登录的用户主目录下，确认公钥文件存在：

```bash
~/.ssh/authorized_keys
```

权限要求：

```bash
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys
```

---

## 4. 测试连接

在关闭现有会话前，**建议新开一个终端测试**：

```bash
ssh user@your_server_ip
```

确认能正常用公钥登录后，再退出原会话。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Ubuntu%20-fu-wu-qi-shang-jin-zhi-mi-ma-deng-lu-%E3%80%81-zhi-yun-xu-gong-yao-deng-lu.html</guid><pubDate>Mon, 29 Sep 2025 06:07:07 +0000</pubDate></item><item><title>cuda ptx 随手记 - lop3</title><link>https://jibinghu.github.io/post/cuda%20ptx%20-sui-shou-ji-%20-%20lop3.html</link><description>参考：https://zhuanlan.zhihu.com/p/1911790481416909410

“LOP3” 是 NVIDIA CUDA / PTX（Parallel Thread Execution）中一个比较高级的位/布尔操作指令。</description><guid isPermaLink="true">https://jibinghu.github.io/post/cuda%20ptx%20-sui-shou-ji-%20-%20lop3.html</guid><pubDate>Sat, 27 Sep 2025 15:40:57 +0000</pubDate></item><item><title>cuda ptx 指令随手记 - prmt (__byte_perm)</title><link>https://jibinghu.github.io/post/cuda%20ptx%20-zhi-ling-sui-shou-ji-%20-%20prmt%20%28__byte_perm%29.html</link><description>
由于 gpt 给出的源和 `https://zhuanlan.zhihu.com/p/30652451322` 给出的 prmt 的说明不一致，在这里做个探讨：

参考： `https://docs.nvidia.com/cuda/parallel-thread-execution/index.html?utm_source` -&gt; `grep prmt`

&gt;&gt; https://zhuanlan.zhihu.com/p/1911790481416909410 这个博客写了 int4 的公式

prmt requires sm_20 or higher.
Permute bytes from register pair.

``` cpp
prmt.b32{.mode}  d, a, b, c;
.mode = { .f4e, .b4e, .rc8, .ecl, .ecr, .rc16 };
```

实际作用都是一样的：Pick four arbitrary bytes from two 32-bit registers, and reassemble them into a 32-bit destination register.
但是对于索引寄存器 c 的使用，在 nvidia doc里：

在没有指定mode 的情况下，c寄存器是 4*4 的：

&lt;img width='1064' height='54' alt='Image' src='https://github.com/user-attachments/assets/7c9e0d5d-ad8a-45b8-8190-736bc7332f82' /&gt;

目前看起来的说法 gpt 给的是正确的，最下面的说明：

&gt;  Least Significant Bit Substitution 最低有效位
&gt; 最高有效位(Most Significant Bit)

&lt;img width='1093' height='81' alt='Image' src='https://github.com/user-attachments/assets/00f2137f-29bf-4022-ba3b-19708b3f26c0' /&gt;

再参考下：https://zhuanlan.zhihu.com/p/660630414 以及 https://zhuanlan.zhihu.com/p/657070837

文章里讲的更详细些：

&gt; 对于目标寄存器中的每个字节，定义了一个 4 位选择器。</description><guid isPermaLink="true">https://jibinghu.github.io/post/cuda%20ptx%20-zhi-ling-sui-shou-ji-%20-%20prmt%20%28__byte_perm%29.html</guid><pubDate>Sat, 27 Sep 2025 14:02:15 +0000</pubDate></item><item><title>cuda 类型测试</title><link>https://jibinghu.github.io/post/cuda%20-lei-xing-ce-shi.html</link><description>btw -&gt; 看不到 nvcc时的解决办法：

``` cuda
export PATH=/usr/local/cuda-13.0/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda-13.0/lib64:$LD_LIBRARY_PATH
```

类型：

``` cpp
#include &lt;iostream&gt;
#include &lt;cuda_runtime.h&gt;
#include &lt;cuda_fp16.h&gt;


int main(){
        std::cout &lt;&lt; '以字节为单位：' &lt;&lt; std::endl;
        std::cout &lt;&lt; 'sizeof(uint4)： ' &lt;&lt; sizeof(uint4) &lt;&lt; std::endl;
        std::cout &lt;&lt; 'sizeof(int4)： ' &lt;&lt; sizeof(int4) &lt;&lt; std::endl;
        std::cout &lt;&lt; 'sizeof(int)： ' &lt;&lt; sizeof(int) &lt;&lt; std::endl;
        std::cout &lt;&lt; 'sizeof(__half)： ' &lt;&lt; sizeof(__half) &lt;&lt; std::endl;
}
```

输出：

&gt; 以字节为单位：
&gt; sizeof(uint4)： 16
&gt; sizeof(int4)： 16
&gt; sizeof(int)： 4
&gt; sizeof(__half)： 2

构造方式：CUDA 提供 make_int4(...) 和 make_uint4(...)

&lt;vector_type.h&gt;(被&lt;cuda_runtime.h&gt;包含)的数据类型 int4 和 uint4 实质上都是结构体：

``` cpp
// int4
typedef struct __device_builtin__ {
    int x, y, z, w;
} int4;

// uint4
typedef struct __device_builtin__ {
    unsigned int x, y, z, w;
} uint4;
```
。</description><guid isPermaLink="true">https://jibinghu.github.io/post/cuda%20-lei-xing-ce-shi.html</guid><pubDate>Fri, 26 Sep 2025 08:10:33 +0000</pubDate></item><item><title>使用 paramiko python 三方库实现远程 ssh 登录及命令执行</title><link>https://jibinghu.github.io/post/shi-yong-%20paramiko%20python%20-san-fang-ku-shi-xian-yuan-cheng-%20ssh%20-deng-lu-ji-ming-ling-zhi-xing.html</link><description>``` python
import os
import paramiko
from typing import Optional, Tuple

def run_ssh_cmd_key(
    host: str,
    port: int,
    username: str,
    cmd: str,
    *,
    key_path: Optional[str] = None,         
    key_passphrase: Optional[str] = None, 
    timeout: int = 15,
    use_sudo: bool = False,
    sudo_password: Optional[str] = None, 
    allow_agent: bool = True,         
    look_for_keys: bool = True,
) -&gt; Tuple[int, str, str]:
    '''
    通过 SSH 私钥执行远程命令。</description><guid isPermaLink="true">https://jibinghu.github.io/post/shi-yong-%20paramiko%20python%20-san-fang-ku-shi-xian-yuan-cheng-%20ssh%20-deng-lu-ji-ming-ling-zhi-xing.html</guid><pubDate>Fri, 26 Sep 2025 06:33:08 +0000</pubDate></item><item><title>ffmpeg cpp用法</title><link>https://jibinghu.github.io/post/ffmpeg%20cpp-yong-fa.html</link><description>opencv 拉流并无损输出：

``` cpp
#include &lt;opencv2/opencv.hpp&gt;
#include &lt;iostream&gt;
#include &lt;cstdio&gt;

int main() {
    std::string input_url = 'rtmp://101.126.68.169/live/mac';
    std::string output_url = 'rtmp://101.126.68.169/live/processed';

    // 打开输入流
    cv::VideoCapture cap(input_url);
    if (!cap.isOpened()) {
        std::cerr &lt;&lt; '无法打开输入流: ' &lt;&lt; input_url &lt;&lt; std::endl;
        return -1;
    }

    int width  = static_cast&lt;int&gt;(cap.get(cv::CAP_PROP_FRAME_WIDTH));
    int height = static_cast&lt;int&gt;(cap.get(cv::CAP_PROP_FRAME_HEIGHT));
    int fps    = static_cast&lt;int&gt;(cap.get(cv::CAP_PROP_FPS));
    if (fps == 0) fps = 25; // 有些流无法正确获取fps，给个默认值

    // 准备 ffmpeg 命令
    std::string ffmpeg_cmd =
        'ffmpeg -y -f rawvideo -pix_fmt bgr24 -s ' +
        std::to_string(width) + 'x' + std::to_string(height) +
        ' -r ' + std::to_string(fps) +
        ' -i - -c:v libx264 -pix_fmt yuv420p -preset ultrafast -f flv ' +
        output_url;

#ifdef _WIN32
    FILE* pipe = _popen(ffmpeg_cmd.c_str(), 'wb');
#else
    FILE* pipe = popen(ffmpeg_cmd.c_str(), 'w');
#endif

    if (!pipe) {
        std::cerr &lt;&lt; '无法启动 ffmpeg 进程' &lt;&lt; std::endl;
        return -1;
    }

    cv::Mat frame;
    while (true) {
        if (!cap.read(frame)) {
            std::cerr &lt;&lt; '读取帧失败，结束' &lt;&lt; std::endl;
            break;
        }

        // 将帧写入 ffmpeg stdin
        fwrite(frame.data, 1, frame.total() * frame.elemSize(), pipe);
    }

#ifdef _WIN32
    _pclose(pipe);
#else
    pclose(pipe);
#endif

    cap.release();
    return 0;
}
```

`g++ test.cpp -o test `pkg-config --cflags --libs opencv4`

调整缓冲帧数：

``` cpp
#include &lt;opencv2/opencv.hpp&gt;
#include &lt;iostream&gt;
#include &lt;cstdio&gt;

int main() {
    std::string input_url = 'rtmp://101.126.68.169/live/mac';
    std::string output_url = 'rtmp://101.126.68.169/live/processed';

    // 打开输入流
    cv::VideoCapture cap(input_url);
    if (!cap.isOpened()) {
        std::cerr &lt;&lt; '无法打开输入流: ' &lt;&lt; input_url &lt;&lt; std::endl;
        return -1;
    }

    // ⚡ 设置缓冲区大小为 1，避免延时累积
    cap.set(cv::CAP_PROP_BUFFERSIZE, 1);

    int width  = static_cast&lt;int&gt;(cap.get(cv::CAP_PROP_FRAME_WIDTH));
    int height = static_cast&lt;int&gt;(cap.get(cv::CAP_PROP_FRAME_HEIGHT));
    int fps    = static_cast&lt;int&gt;(cap.get(cv::CAP_PROP_FPS));
    if (fps == 0) fps = 25; // 有些流获取不到fps，给默认值

    // 准备 ffmpeg 命令
    std::string ffmpeg_cmd =
        'ffmpeg -y -f rawvideo -pix_fmt bgr24 -s ' +
        std::to_string(width) + 'x' + std::to_string(height) +
        ' -r ' + std::to_string(fps) +
        ' -i - -c:v libx264 -pix_fmt yuv420p -preset ultrafast -f flv ' +
        output_url;

#ifdef _WIN32
    FILE* pipe = _popen(ffmpeg_cmd.c_str(), 'wb');
#else
    FILE* pipe = popen(ffmpeg_cmd.c_str(), 'w');
#endif

    if (!pipe) {
        std::cerr &lt;&lt; '无法启动 ffmpeg 进程' &lt;&lt; std::endl;
        return -1;
    }

    cv::Mat frame;
    while (true) {
        // 丢掉旧帧，只取最新的
        cap.grab();          // 抓取一帧但不解码
        if (!cap.retrieve(frame)) {
            std::cerr &lt;&lt; '读取帧失败，结束' &lt;&lt; std::endl;
            break;
        }

        // 写入 ffmpeg stdin
        fwrite(frame.data, 1, frame.total() * frame.elemSize(), pipe);
    }

#ifdef _WIN32
    _pclose(pipe);
#else
    pclose(pipe);
#endif

    cap.release();
    return 0;
}
```
。</description><guid isPermaLink="true">https://jibinghu.github.io/post/ffmpeg%20cpp-yong-fa.html</guid><pubDate>Thu, 25 Sep 2025 13:34:22 +0000</pubDate></item><item><title>20250924 模型快照</title><link>https://jibinghu.github.io/post/20250924%20-mo-xing-kuai-zhao.html</link><description>[AIassistant] PS: 感觉不是很好

按三条主线来梳理：推理（Reasoning）、Agent（具身/工具/桌面控制）、Coding（软件工程落地），并配上训练/推理框架的现状与选型建议。</description><guid isPermaLink="true">https://jibinghu.github.io/post/20250924%20-mo-xing-kuai-zhao.html</guid><pubDate>Wed, 24 Sep 2025 14:46:59 +0000</pubDate></item><item><title>vllm 中的 `prefix cache` 缓存前置</title><link>https://jibinghu.github.io/post/vllm%20-zhong-de-%20%60prefix%20cache%60%20-huan-cun-qian-zhi.html</link><description>参考：

https://vllm.hyper.ai/docs/design-v1/prefix_caching/

https://mp.weixin.qq.com/s/RC8QV0Alyw0y8sEXAOOM3Q

---

前缀缓存 KV 缓存块是 LLM 推理中一种流行的优化技术，用于避免冗余的提示计算。</description><guid isPermaLink="true">https://jibinghu.github.io/post/vllm%20-zhong-de-%20%60prefix%20cache%60%20-huan-cun-qian-zhi.html</guid><pubDate>Wed, 24 Sep 2025 14:36:54 +0000</pubDate></item><item><title>C++ 字面量</title><link>https://jibinghu.github.io/post/C%2B%2B%20-zi-mian-liang.html</link><description>https://c-cpp.com/cpp/language/integer_literal

---

在 C++ 里，字面量（Literal）就是在代码中直接写出来的常量值。</description><guid isPermaLink="true">https://jibinghu.github.io/post/C%2B%2B%20-zi-mian-liang.html</guid><pubDate>Wed, 24 Sep 2025 11:25:26 +0000</pubDate></item><item><title>cuda 内存池用法</title><link>https://jibinghu.github.io/post/cuda%20-nei-cun-chi-yong-fa.html</link><description>cudaDeviceSetMemPool` 是 **NVIDIA 官方 CUDA Runtime API**（CUDA ≥ 11.2 引入），和 `cudaMallocAsync / cudaFreeAsync`、`cudaMemPoolCreate` 等属于同一套**异步内存分配与内存池**接口。</description><guid isPermaLink="true">https://jibinghu.github.io/post/cuda%20-nei-cun-chi-yong-fa.html</guid><pubDate>Wed, 24 Sep 2025 10:42:20 +0000</pubDate></item><item><title>GPTQ Mark</title><link>https://jibinghu.github.io/post/GPTQ%20Mark.html</link><description>https://www.zhihu.com/search?type=content&amp;q=%E6%A8%A1%E5%9E%8B%E9%87%8F%E5%8C%96%E7%BB%BC%E8%BF%B0


MLA Mark：
https://zhuanlan.zhihu.com/p/1948769945132470860?share_code=oxowYwGJGgQn&amp;utm_psn=1950538953032733710

https://zhuanlan.zhihu.com/p/1948769945132470860?share_code=oxowYwGJGgQn&amp;utm_psn=1950538953032733710。</description><guid isPermaLink="true">https://jibinghu.github.io/post/GPTQ%20Mark.html</guid><pubDate>Wed, 24 Sep 2025 04:45:17 +0000</pubDate></item><item><title>ulimit 命令</title><link>https://jibinghu.github.io/post/ulimit%20-ming-ling.html</link><description>用了很长时间ulimit命令，还没认真看这个命令的作用：

---

下面详细解释一下 **`ulimit -s unlimited`** 这个命令：

---

## 1. `ulimit` 是什么

* `ulimit` 是 Linux/Unix 系统里的 **shell 内置命令**，用于控制当前 shell 进程及其子进程所能使用的系统资源上限。</description><guid isPermaLink="true">https://jibinghu.github.io/post/ulimit%20-ming-ling.html</guid><pubDate>Tue, 23 Sep 2025 15:16:42 +0000</pubDate></item><item><title>NetCDF Fortran API 及其使用</title><link>https://jibinghu.github.io/post/NetCDF%20Fortran%20API%20-ji-qi-shi-yong.html</link><description>NetCDF（Network Common Data Form）是一种用于科学数据存储和共享的自描述、网络透明、直接访问和可扩展的文件格式。</description><guid isPermaLink="true">https://jibinghu.github.io/post/NetCDF%20Fortran%20API%20-ji-qi-shi-yong.html</guid><pubDate>Tue, 23 Sep 2025 03:53:35 +0000</pubDate></item><item><title>Nsys/TorchProfiler/NCU 使用</title><link>https://jibinghu.github.io/post/Nsys-TorchProfiler-NCU%20-shi-yong.html</link><description>主要参考：https://zhuanlan.zhihu.com/p/1945304372545291742

---

Blog 中有很多基础的知识，这里不做过多赘述。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Nsys-TorchProfiler-NCU%20-shi-yong.html</guid><pubDate>Mon, 22 Sep 2025 07:37:42 +0000</pubDate></item><item><title>warp 分支串行执行</title><link>https://jibinghu.github.io/post/warp%20-fen-zhi-chuan-xing-zhi-xing.html</link><description>在 **CUDA** 中，`warp` 是由 **32 个线程** 组成的基本执行单元。</description><guid isPermaLink="true">https://jibinghu.github.io/post/warp%20-fen-zhi-chuan-xing-zhi-xing.html</guid><pubDate>Tue, 15 Jul 2025 05:57:28 +0000</pubDate></item><item><title>Numba JIT ToolKit</title><link>https://jibinghu.github.io/post/Numba%20JIT%20ToolKit.html</link><description>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Numba 是一个开源的即时编译（JIT, Just-In-Time compilation）工具，它通过将标注过的 Python 函数在运行时编译成高效的机器码，显著加速数值计算代码，尤其在对 NumPy 数组的操作上优势突出。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Numba%20JIT%20ToolKit.html</guid><pubDate>Mon, 09 Jun 2025 02:31:21 +0000</pubDate></item><item><title>源码修改 pip site-package</title><link>https://jibinghu.github.io/post/yuan-ma-xiu-gai-%20pip%20site-package.html</link><description>在 Python 中，所有通过 pip 安装的包都会被放到某个 “site-packages” 目录下，这个目录位于 Python 的安装路径或虚拟环境目录里。</description><guid isPermaLink="true">https://jibinghu.github.io/post/yuan-ma-xiu-gai-%20pip%20site-package.html</guid><pubDate>Mon, 09 Jun 2025 02:29:35 +0000</pubDate></item><item><title>大气层描述</title><link>https://jibinghu.github.io/post/da-qi-ceng-miao-shu.html</link><description>---

大气层的高度并不是直接以“0.01 hPa”来描述的，但“0.01 hPa”常用于表示大气层的极高层（即大约 80 公里以上）。</description><guid isPermaLink="true">https://jibinghu.github.io/post/da-qi-ceng-miao-shu.html</guid><pubDate>Sat, 07 Jun 2025 09:02:21 +0000</pubDate></item><item><title>自动机</title><link>https://jibinghu.github.io/post/zi-dong-ji.html</link><description>以下是一个简单的自动机（Finite Automaton）的代码示例，它实现了一个确定性有限自动机（DFA）。</description><guid isPermaLink="true">https://jibinghu.github.io/post/zi-dong-ji.html</guid><pubDate>Wed, 04 Jun 2025 06:45:12 +0000</pubDate></item><item><title>dabang 记录 shipinfangdou</title><link>https://jibinghu.github.io/post/dabang%20-ji-lu-%20shipinfangdou.html</link><description># 资源受限环境下的视频防抖方案

在仅有2核CPU、5GB内存且无GPU的离线环境中，对智能眼镜拍摄的视频进行防抖，需要采用高效轻量的算法。</description><guid isPermaLink="true">https://jibinghu.github.io/post/dabang%20-ji-lu-%20shipinfangdou.html</guid><pubDate>Wed, 04 Jun 2025 06:39:44 +0000</pubDate></item><item><title>c++ 随手记录 isdigit()</title><link>https://jibinghu.github.io/post/c%2B%2B%20-sui-shou-ji-lu-%20isdigit%28%29.html</link><description>在 C++ 中，`isdigit()` 是一个用于判断字符是否为十进制数字（即 `'0'` 到 `'9'`）的标准函数。</description><guid isPermaLink="true">https://jibinghu.github.io/post/c%2B%2B%20-sui-shou-ji-lu-%20isdigit%28%29.html</guid><pubDate>Wed, 04 Jun 2025 03:14:39 +0000</pubDate></item><item><title>断言 assert</title><link>https://jibinghu.github.io/post/duan-yan-%20assert.html</link><description>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;在C++中，&lt;code inline=''&gt;assert&lt;/code&gt;是一个宏，用于在程序运行时进行条件检查。</description><guid isPermaLink="true">https://jibinghu.github.io/post/duan-yan-%20assert.html</guid><pubDate>Tue, 03 Jun 2025 13:49:58 +0000</pubDate></item><item><title>全参数训练qwen3-0.5b</title><link>https://jibinghu.github.io/post/quan-can-shu-xun-lian-qwen3-0.5b.html</link><description>``` python 
import json
import pandas as pd
import torch
from datasets import Dataset
from transformers import AutoTokenizer, AutoModelForCausalLM, TrainingArguments, Trainer, DataCollatorForSeq2Seq
import os
import swanlab

# 设置 SwanLab 项目名称
os.environ['SWANLAB_PROJECT'] = 'qwen3-sft-dialog'

# 定义提示（PROMPT）和最大序列长度
PROMPT = '你是一个对话助手，你需要根据用户的问题，给出相应的回答。</description><guid isPermaLink="true">https://jibinghu.github.io/post/quan-can-shu-xun-lian-qwen3-0.5b.html</guid><pubDate>Tue, 03 Jun 2025 02:21:42 +0000</pubDate></item><item><title>libcusparse.so.12: undefined symbol: __nvJitLinkComplete_12_4, version libnvJitLink.so.12 报错解决</title><link>https://jibinghu.github.io/post/libcusparse.so.12-%20undefined%20symbol-%20__nvJitLinkComplete_12_4%2C%20version%20libnvJitLink.so.12%20-bao-cuo-jie-jue.html</link><description>参考 https://github.com/pytorch/pytorch/issues/134929

``` bash
# Install nightly version of pytorch
pip3 install -U --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu126
```。</description><guid isPermaLink="true">https://jibinghu.github.io/post/libcusparse.so.12-%20undefined%20symbol-%20__nvJitLinkComplete_12_4%2C%20version%20libnvJitLink.so.12%20-bao-cuo-jie-jue.html</guid><pubDate>Wed, 28 May 2025 15:34:19 +0000</pubDate></item><item><title>记录Docker环境劫持/影响宿主机代理的问题</title><link>https://jibinghu.github.io/post/ji-lu-Docker-huan-jing-jie-chi---ying-xiang-su-zhu-ji-dai-li-de-wen-ti.html</link><description>``` bash
User@ubuntu:~$ wget www.baidu.com
--2025-05-28 15:15:03--  http://www.baidu.com/
Connecting to 172.26.1.45:3128... failed: No route to host.
```
在使用docker发现路由不可达，ping跳板机也遇到问题：
``` bash 
User@ubuntu:~$ ping 172.26.1.45
PING 172.26.1.45 (172.26.1.45) 56(84) bytes of data.
From 172.26.0.1 icmp_seq=1 Destination Host Unreachable
```
且服务器内有很多Docker Container运行历史时，要考虑是不是Docker占用了网络。</description><guid isPermaLink="true">https://jibinghu.github.io/post/ji-lu-Docker-huan-jing-jie-chi---ying-xiang-su-zhu-ji-dai-li-de-wen-ti.html</guid><pubDate>Wed, 28 May 2025 07:37:13 +0000</pubDate></item><item><title>WindowsOS 公钥流程</title><link>https://jibinghu.github.io/post/WindowsOS%20-gong-yao-liu-cheng.html</link><description>``` bash
# 如果已有key，忽略第一行命令
ssh-keygen -t rsa -b 2048 -C '&lt;comment&gt;' # comment可以是当前电脑的备注，方便你识别自己的设备
# 随后可以按默认配置一路回车，直至成功生成key
# 跳转到密钥文件所在目录
cd C:\Users\&lt;username&gt;\.ssh
# 查看并复制id_rsa.pub
type id_rsa.pub | clip
```。</description><guid isPermaLink="true">https://jibinghu.github.io/post/WindowsOS%20-gong-yao-liu-cheng.html</guid><pubDate>Wed, 28 May 2025 02:24:09 +0000</pubDate></item><item><title>Vision Language 模型方向</title><link>https://jibinghu.github.io/post/Vision%20Language%20-mo-xing-fang-xiang.html</link><description>目前，**VL（Vision-Language）模型**的设计理念有两种主要的思路：一种是将 **视觉模型** 和 **语言模型** 融合成一个统一的模型（类似于 **VLM**，Vision-Language Models），另一种是采用 **先训练计算机视觉（CV）模型，再加上语言模型（LLM）** 的方法。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Vision%20Language%20-mo-xing-fang-xiang.html</guid><pubDate>Mon, 19 May 2025 13:22:20 +0000</pubDate></item><item><title>CUDA Graph Demo</title><link>https://jibinghu.github.io/post/CUDA%20Graph%20Demo.html</link><description>### 背景

假设我们有一个深度学习的训练过程，其中包含了多个计算操作，比如：

1. 从主机内存（CPU）传输数据到设备内存（GPU）。</description><guid isPermaLink="true">https://jibinghu.github.io/post/CUDA%20Graph%20Demo.html</guid><pubDate>Wed, 14 May 2025 10:18:46 +0000</pubDate></item><item><title>TTS(一)</title><link>https://jibinghu.github.io/post/TTS%28-yi-%29.html</link><description>文本前处理（Text Preprocessing）：文本会经过一个规范化过程，转化为适合模型输入的形式。</description><guid isPermaLink="true">https://jibinghu.github.io/post/TTS%28-yi-%29.html</guid><pubDate>Wed, 14 May 2025 09:00:38 +0000</pubDate></item><item><title>瞎看-服务器 cpu 爆满排疑</title><link>https://jibinghu.github.io/post/xia-kan---fu-wu-qi-%20cpu%20-bao-man-pai-yi.html</link><description>https://zhuanlan.zhihu.com/p/677622575?share_code=12FzRI3tKPLIq&amp;utm_psn=1903096199495541413

```
# 查到了如下两个命令可以一定程度上发现被隐藏的进程
[sysdig](https://zhida.zhihu.com/search?content_id=238712996&amp;content_type=Article&amp;match_order=1&amp;q=sysdig&amp;zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDY2ODY4NDAsInEiOiJzeXNkaWciLCJ6aGlkYV9zb3VyY2UiOiJlbnRpdHkiLCJjb250ZW50X2lkIjoyMzg3MTI5OTYsImNvbnRlbnRfdHlwZSI6IkFydGljbGUiLCJtYXRjaF9vcmRlciI6MSwiemRfdG9rZW4iOm51bGx9.39UtTm5OJOKMHHlRPn7w_E3wI1xANgN0lnMfqACshcg&amp;zhida_source=entity) -c topprocs_cpu # 该命令可以输出cpu占用的排行，经测试可以显示出被隐藏的进程
[unhide](https://zhida.zhihu.com/search?content_id=238712996&amp;content_type=Article&amp;match_order=1&amp;q=unhide&amp;zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDY2ODY4NDAsInEiOiJ1bmhpZGUiLCJ6aGlkYV9zb3VyY2UiOiJlbnRpdHkiLCJjb250ZW50X2lkIjoyMzg3MTI5OTYsImNvbnRlbnRfdHlwZSI6IkFydGljbGUiLCJtYXRjaF9vcmRlciI6MSwiemRfdG9rZW4iOm51bGx9.8zSX_tfrCuLHaKwRMEosYQchj0ARiIl8O0zDM2IhI_o&amp;zhida_source=entity) proc # 自助搜索隐藏进程，linux系统中一切皆文件，proc目录下保存的就是所有正在运行程序的进程ID，即PID
```
以上两个命令需要额外安装，不是系统自带命令

```
# sysdig可用如下命令安装，curl是类似wget的下载命令，这里下载的是一个bash脚本，下载后再通过bash执行安装
curl -s https://s3.amazonaws.com/download.draios.com/stable/install-sysdig | bash
# unhide 可以通过如下命令进行安装
yum install unhide # 中毒的是[Centos7](https://zhida.zhihu.com/search?content_id=238712996&amp;content_type=Article&amp;match_order=1&amp;q=Centos7&amp;zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDY2ODY4NDAsInEiOiJDZW50b3M3IiwiemhpZGFfc291cmNlIjoiZW50aXR5IiwiY29udGVudF9pZCI6MjM4NzEyOTk2LCJjb250ZW50X3R5cGUiOiJBcnRpY2xlIiwibWF0Y2hfb3JkZXIiOjEsInpkX3Rva2VuIjpudWxsfQ.CnLDI7ucXXE5wALn1HfCdZ-pDPAyK2zd9quRPdnTWB0&amp;zhida_source=entity)系统，所以用的是yum
```

```
# 至于为什么不要第一时间用kill删掉病毒进程，这是一个惨痛教训，后面会提到。</description><guid isPermaLink="true">https://jibinghu.github.io/post/xia-kan---fu-wu-qi-%20cpu%20-bao-man-pai-yi.html</guid><pubDate>Tue, 06 May 2025 08:28:23 +0000</pubDate></item><item><title>有限差分</title><link>https://jibinghu.github.io/post/you-xian-cha-fen.html</link><description>### 回顾泰勒展开：

泰勒展开（Taylor expansion）是将一个在某点可导的无穷次的函数表示为该点的导数的无穷级数。</description><guid isPermaLink="true">https://jibinghu.github.io/post/you-xian-cha-fen.html</guid><pubDate>Tue, 06 May 2025 08:10:37 +0000</pubDate></item><item><title>NULL和nullptr区别？为什么要引入nullptr？</title><link>https://jibinghu.github.io/post/NULL-he-nullptr-qu-bie-%EF%BC%9F-wei-shen-me-yao-yin-ru-nullptr%EF%BC%9F.html</link><description>### 区别

#### 1. 类型不同
- **`NULL`**：在 C++ 里，`NULL` 通常被定义为 `0` 或者 `(void*)0`。</description><guid isPermaLink="true">https://jibinghu.github.io/post/NULL-he-nullptr-qu-bie-%EF%BC%9F-wei-shen-me-yao-yin-ru-nullptr%EF%BC%9F.html</guid><pubDate>Wed, 23 Apr 2025 09:48:38 +0000</pubDate></item><item><title>一个变量可以既是const又是volatile吗？</title><link>https://jibinghu.github.io/post/yi-ge-bian-liang-ke-yi-ji-shi-const-you-shi-volatile-ma-%EF%BC%9F.html</link><description>在 C++ 里，一个变量能够同时具备 `const` 和 `volatile` 这两个修饰符。</description><guid isPermaLink="true">https://jibinghu.github.io/post/yi-ge-bian-liang-ke-yi-ji-shi-const-you-shi-volatile-ma-%EF%BC%9F.html</guid><pubDate>Wed, 23 Apr 2025 09:39:28 +0000</pubDate></item><item><title>CPP 八股</title><link>https://jibinghu.github.io/post/CPP%20-ba-gu.html</link><description>### 作用

在 C++ 中，`thread_local` 是一个存储类说明符，它的主要作用是为每个线程创建独立的变量实例。</description><guid isPermaLink="true">https://jibinghu.github.io/post/CPP%20-ba-gu.html</guid><pubDate>Wed, 23 Apr 2025 09:36:34 +0000</pubDate></item><item><title>C++八股（二）</title><link>https://jibinghu.github.io/post/C%2B%2B-ba-gu-%EF%BC%88-er-%EF%BC%89.html</link><description>---
在 C++ 里，`static` 关键字有三种主要作用，下面为你详细介绍：

### 1. 修饰局部变量
当 `static` 用于修饰局部变量时，该变量的生命周期会延长至整个程序运行期间，而非局限于所在函数的执行期间。</description><guid isPermaLink="true">https://jibinghu.github.io/post/C%2B%2B-ba-gu-%EF%BC%88-er-%EF%BC%89.html</guid><pubDate>Tue, 22 Apr 2025 11:22:26 +0000</pubDate></item><item><title>内网网段</title><link>https://jibinghu.github.io/post/nei-wang-wang-duan.html</link><description>根据 [RFC 1918](https://tools.ietf.org/html/rfc1918) 的定义，以下三个 IP 地址范围被保留为私有（内网）地址，这些地址不会在互联网上路由，只能在本地网络中使用：
10.0.0.0 - 10.255.255.255（10.0.0.0/8）
172.16.0.0 - 172.31.255.255（172.16.0.0/12）
192.168.0.0 - 192.168.255.255（192.168.0.0/16）。</description><guid isPermaLink="true">https://jibinghu.github.io/post/nei-wang-wang-duan.html</guid><pubDate>Tue, 15 Apr 2025 08:45:46 +0000</pubDate></item><item><title>大模型八股(一)</title><link>https://jibinghu.github.io/post/da-mo-xing-ba-gu-%28-yi-%29.html</link><description># Activate Func

Sigmoid and Tanh:

![Image](https://github.com/user-attachments/assets/d8dfdbfb-64b6-45f5-9242-7c432c7862f4)

ReLu and The Others:

![Image](https://github.com/user-attachments/assets/ef1f067e-c438-4b29-ab2d-f98308010b94)

ReLu's Trans:

![Image](https://github.com/user-attachments/assets/d46727b0-0da5-491f-81f9-8b9d67646fa8)

GeLU:

![Image](https://github.com/user-attachments/assets/9d8d3a79-873b-446d-b1a0-eec8810152ee)

Swish:

![Image](https://github.com/user-attachments/assets/c637a853-dac9-405c-bf40-41826e726694)


---

KL Divergence And L1/2 Regularization

### 1. **KL 散度**
- **英文名称**：KL Divergence
- **全称**：Kullback-Leibler Divergence
- **简要解释**：KL 散度是一种衡量两个概率分布之间差异的非对称性度量。</description><guid isPermaLink="true">https://jibinghu.github.io/post/da-mo-xing-ba-gu-%28-yi-%29.html</guid><pubDate>Sun, 13 Apr 2025 08:47:08 +0000</pubDate></item><item><title>C Plus Plus 虚函数相关</title><link>https://jibinghu.github.io/post/C%20Plus%20Plus%20-xu-han-shu-xiang-guan.html</link><description>## final和override的作用？final为什么能提高代码执行效率？

&gt; override：保证在派生类中声明的重载函数，与基类的虚函数有相同的签名，作用就是用于编译期代码检查。</description><guid isPermaLink="true">https://jibinghu.github.io/post/C%20Plus%20Plus%20-xu-han-shu-xiang-guan.html</guid><pubDate>Wed, 09 Apr 2025 14:49:06 +0000</pubDate></item><item><title>CUTLASS 学习</title><link>https://jibinghu.github.io/post/CUTLASS%20-xue-xi.html</link><description>reference：
CUTLASS学习资料汇总 - CUDA矩阵乘法库：https://blog.csdn.net/m0_75126181/article/details/142567933
CUTLASS Github：https://github.com/NVIDIA/cutlass/blob/main/media/docs/quickstart.md
CUTLASS 基础介绍、：https://zhuanlan.zhihu.com/p/671324125
CUTLASS 2.x &amp; CUTLASS 3.x Intro 学习笔记：https://blog.csdn.net/just_sort/article/details/141038365
CUDA C++ Programming Guide：https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html
。</description><guid isPermaLink="true">https://jibinghu.github.io/post/CUTLASS%20-xue-xi.html</guid><pubDate>Thu, 27 Mar 2025 08:22:42 +0000</pubDate></item><item><title>`判断一个整数是否是2的幂`的方法</title><link>https://jibinghu.github.io/post/%60-pan-duan-yi-ge-zheng-shu-shi-fou-shi-2-de-mi-%60-de-fang-fa.html</link><description>判断一个整数是否是2的幂，以下是几种快速方法：

1. **位运算（n &amp; (n - 1))**  
   **条件**：`n &gt; 0` 且 `(n &amp; (n - 1)) == 0`  
   **原理**：2的幂的二进制仅有一个1。</description><guid isPermaLink="true">https://jibinghu.github.io/post/%60-pan-duan-yi-ge-zheng-shu-shi-fou-shi-2-de-mi-%60-de-fang-fa.html</guid><pubDate>Fri, 21 Mar 2025 03:09:02 +0000</pubDate></item><item><title>fortran 编译宏相关</title><link>https://jibinghu.github.io/post/fortran%20-bian-yi-hong-xiang-guan.html</link><description>



---

### **问题根源**
`mpp_update_domain2D_r8_3Dv` 能正常编译，而 `mpp_get_update_domain2D_r8_3Dv` 报错，主要原因是它们的 **符号可见性** 和 **宏替换逻辑** 存在差异。</description><guid isPermaLink="true">https://jibinghu.github.io/post/fortran%20-bian-yi-hong-xiang-guan.html</guid><pubDate>Fri, 21 Mar 2025 02:05:34 +0000</pubDate></item><item><title>解释命令：grep -rn 'mpp_update_domains.*public\|public.*mpp_update_domains'</title><link>https://jibinghu.github.io/post/jie-shi-ming-ling-%EF%BC%9Agrep%20-rn%20%27mpp_update_domains.-public--public.-mpp_update_domains%27.html</link><description>`grep` 是一个强大的文本搜索工具，用于在文件中搜索符合特定模式的字符串。</description><guid isPermaLink="true">https://jibinghu.github.io/post/jie-shi-ming-ling-%EF%BC%9Agrep%20-rn%20%27mpp_update_domains.-public--public.-mpp_update_domains%27.html</guid><pubDate>Thu, 20 Mar 2025 15:07:06 +0000</pubDate></item><item><title>​Fortran 接口（interface）的泛型绑定机制</title><link>https://jibinghu.github.io/post/%E2%80%8BFortran%20-jie-kou-%EF%BC%88interface%EF%BC%89-de-fan-xing-bang-ding-ji-zhi.html</link><description>好的，用户现在的问题是关于如何确定`mpp_update_domain2d_r8_3dv`这个函数是在哪里被导入的。</description><guid isPermaLink="true">https://jibinghu.github.io/post/%E2%80%8BFortran%20-jie-kou-%EF%BC%88interface%EF%BC%89-de-fan-xing-bang-ding-ji-zhi.html</guid><pubDate>Thu, 20 Mar 2025 14:27:18 +0000</pubDate></item><item><title>C 语言传递数组</title><link>https://jibinghu.github.io/post/C%20-yu-yan-chuan-di-shu-zu.html</link><description>

在 C 语言中传递数组到函数时，需要特别注意 **数组退化（Array Decay）** 的特性。</description><guid isPermaLink="true">https://jibinghu.github.io/post/C%20-yu-yan-chuan-di-shu-zu.html</guid><pubDate>Sun, 16 Mar 2025 15:08:17 +0000</pubDate></item><item><title>Attention 补充说明</title><link>https://jibinghu.github.io/post/Attention%20-bu-chong-shuo-ming.html</link><description>
---

kv cache 以及 casual mask 演示

![Image](https://github.com/user-attachments/assets/53697fd5-e62f-4a07-95d2-c33fa0265279)

MHA 的多头注意力是在权重矩阵阶段就切分的，同理，MQA/GQA的多头注意力的共享也是在权重矩阵阶段就共享的。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Attention%20-bu-chong-shuo-ming.html</guid><pubDate>Wed, 05 Mar 2025 09:03:47 +0000</pubDate></item><item><title>大模型涉及到的精度：FP32、TF32、FP16、BF16、FP8、FP4、NF4、INT8</title><link>https://jibinghu.github.io/post/da-mo-xing-she-ji-dao-de-jing-du-%EF%BC%9AFP32%E3%80%81TF32%E3%80%81FP16%E3%80%81BF16%E3%80%81FP8%E3%80%81FP4%E3%80%81NF4%E3%80%81INT8.html</link><description>## 整体：

[浮点数精度](https://zhida.zhihu.com/search?content_id=246744417&amp;content_type=Article&amp;match_order=1&amp;q=%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6&amp;zhida_source=entity)：双精度（FP64）、单精度（FP32、TF32）、半精度（FP16、BF16）、8位精度（FP8）、4位精度（FP4、[NF4](https://zhida.zhihu.com/search?content_id=246744417&amp;content_type=Article&amp;match_order=1&amp;q=NF4&amp;zhida_source=entity)）

量化精度：[INT8](https://zhida.zhihu.com/search?content_id=246744417&amp;content_type=Article&amp;match_order=1&amp;q=INT8&amp;zhida_source=entity)、INT4 （也有INT3/INT5/INT6的）

## 精度：

在计算机中，浮点数存储方式，由由符号位（sign）、指数位（exponent）和小数位（fraction）三部分组成。</description><guid isPermaLink="true">https://jibinghu.github.io/post/da-mo-xing-she-ji-dao-de-jing-du-%EF%BC%9AFP32%E3%80%81TF32%E3%80%81FP16%E3%80%81BF16%E3%80%81FP8%E3%80%81FP4%E3%80%81NF4%E3%80%81INT8.html</guid><pubDate>Fri, 28 Feb 2025 06:31:41 +0000</pubDate></item><item><title>gdb 调试断点操作</title><link>https://jibinghu.github.io/post/gdb%20-diao-shi-duan-dian-cao-zuo.html</link><description>在 GDB 调试过程中，设置断点并在断点处停下来后，你可以执行一系列操作来检查、修改程序的状态，或继续调试。</description><guid isPermaLink="true">https://jibinghu.github.io/post/gdb%20-diao-shi-duan-dian-cao-zuo.html</guid><pubDate>Wed, 19 Feb 2025 06:45:43 +0000</pubDate></item><item><title>gdb 调试常用命令</title><link>https://jibinghu.github.io/post/gdb%20-diao-shi-chang-yong-ming-ling.html</link><description>gdb 调试的常用命令：
	1.	启动调试：
	•	gdb ./your_program：启动 gdb 并加载程序。</description><guid isPermaLink="true">https://jibinghu.github.io/post/gdb%20-diao-shi-chang-yong-ming-ling.html</guid><pubDate>Tue, 18 Feb 2025 02:12:57 +0000</pubDate></item><item><title>Docker 的常用命令</title><link>https://jibinghu.github.io/post/Docker%20-de-chang-yong-ming-ling.html</link><description>以下是一些 Docker 的常用命令，涵盖了从容器管理、镜像操作到网络管理等各个方面：

1. 容器管理命令
	•	启动一个容器
docker run &lt;镜像名&gt;
启动并运行一个新的容器。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Docker%20-de-chang-yong-ming-ling.html</guid><pubDate>Mon, 17 Feb 2025 12:01:43 +0000</pubDate></item><item><title>MPI 跨进程调试工具</title><link>https://jibinghu.github.io/post/MPI%20-kua-jin-cheng-diao-shi-gong-ju.html</link><description>在调试 MPI 程序时，通常每个进程都在独立的执行上下文中运行，因此很难直接同步调试所有进程。</description><guid isPermaLink="true">https://jibinghu.github.io/post/MPI%20-kua-jin-cheng-diao-shi-gong-ju.html</guid><pubDate>Mon, 17 Feb 2025 09:43:31 +0000</pubDate></item><item><title>mpiP 以及 mpitrace 的使用</title><link>https://jibinghu.github.io/post/mpiP%20-yi-ji-%20mpitrace%20-de-shi-yong.html</link><description>mpiP 是一个轻量级的 MPI 性能分析工具，用于分析并行程序中的 MPI 通信性能。</description><guid isPermaLink="true">https://jibinghu.github.io/post/mpiP%20-yi-ji-%20mpitrace%20-de-shi-yong.html</guid><pubDate>Mon, 17 Feb 2025 06:47:16 +0000</pubDate></item><item><title>减脂期建议DeepSeek</title><link>https://jibinghu.github.io/post/jian-zhi-qi-jian-yi-DeepSeek.html</link><description>根据你的需求（减脂期、规律运动、补充多维元素片和辅酶Q10），结合你的身高体重和运动状态，以下是更详细的营养素补充建议，重点关注**减脂期代谢优化、关节保护、运动恢复和能量管理**。</description><guid isPermaLink="true">https://jibinghu.github.io/post/jian-zhi-qi-jian-yi-DeepSeek.html</guid><pubDate>Mon, 17 Feb 2025 04:42:34 +0000</pubDate></item><item><title>临时Mark: MPI进程调试</title><link>https://jibinghu.github.io/post/lin-shi-Mark-%20MPI-jin-cheng-diao-shi.html</link><description>为了跟踪MPI程序中的变量变化并分析调用流程，以下是几种详细的方法和步骤：

1. 使用调试器（GDB）附加MPI进程
方法说明
通过GDB直接调试MPI进程，设置断点或观察点（watchpoint）跟踪变量变化，适合精准调试但需要手动操作。</description><guid isPermaLink="true">https://jibinghu.github.io/post/lin-shi-Mark-%20MPI-jin-cheng-diao-shi.html</guid><pubDate>Thu, 13 Feb 2025 16:08:33 +0000</pubDate></item><item><title>Linux 防火墙及 iptables | ufw | firewalld 相关</title><link>https://jibinghu.github.io/post/Linux%20-fang-huo-qiang-ji-%20iptables%20-%20ufw%20-%20firewalld%20-xiang-guan.html</link><description>### Firewall-cmd 简介

`firewall-cmd` 是一个用于管理 Linux 系统上的 Firewalld 防火墙的命令行工具。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Linux%20-fang-huo-qiang-ji-%20iptables%20-%20ufw%20-%20firewalld%20-xiang-guan.html</guid><pubDate>Thu, 13 Feb 2025 09:01:50 +0000</pubDate></item><item><title>算法题记录：QPS性能测试工具</title><link>https://jibinghu.github.io/post/suan-fa-ti-ji-lu-%EF%BC%9AQPS-xing-neng-ce-shi-gong-ju.html</link><description>题目：
---

Python实现一个QPS性能测试工具，具体要求如下： 1、 QPS定义：request/second 表示服务每秒处理请求数的性能 2、 要求N个Client同时请求http服务 3、 N个Client并发请求要求使用协程、线程或进程 4、 N个Client并发模拟真实场景，动态调整，通过一定时间间隔初步增加并发量，例如从0,4,8,16（此要求可选） 补充： 5、 可以使用代码补全工具，可以上网查看语法，不能使用copilot直接检索答案 6、代码逻辑尽量模块化编程。</description><guid isPermaLink="true">https://jibinghu.github.io/post/suan-fa-ti-ji-lu-%EF%BC%9AQPS-xing-neng-ce-shi-gong-ju.html</guid><pubDate>Wed, 12 Feb 2025 09:31:25 +0000</pubDate></item><item><title>多头注意力（MHA）和分组查询注意力（GQA）的伪代码实现</title><link>https://jibinghu.github.io/post/duo-tou-zhu-yi-li-%EF%BC%88MHA%EF%BC%89-he-fen-zu-cha-xun-zhu-yi-li-%EF%BC%88GQA%EF%BC%89-de-wei-dai-ma-shi-xian.html</link><description>多头注意力（MHA）和分组查询注意力（GQA）的伪代码实现：

---

### **1. 多头注意力（Multi-Head Attention, MHA）**
```python
def MultiHeadAttention(Q, K, V, num_heads, d_model):
    batch_size, seq_len = Q.size(0), Q.size(1)
    d_k = d_model // num_heads  # 每个头的维度
    
    # 1. 线性投影并分割头
    Q = linear(Q).view(batch_size, seq_len, num_heads, d_k).transpose(1, 2)
    K = linear(K).view(batch_size, seq_len, num_heads, d_k).transpose(1, 2)
    V = linear(V).view(batch_size, seq_len, num_heads, d_k).transpose(1, 2)
    
    # 2. 计算缩放点积注意力
    scores = torch.matmul(Q, K.transpose(-2, -1)) / math.sqrt(d_k)
    attn = softmax(scores, dim=-1)
    context = torch.matmul(attn, V)
    
    # 3. 合并所有头并线性变换
    context = context.transpose(1, 2).contiguous().view(batch_size, seq_len, d_model)
    output = linear(context)
    return output
```

**关键步骤说明**：
1. 将输入 `Q/K/V` 分别投影到 `num_heads` 个独立的头。</description><guid isPermaLink="true">https://jibinghu.github.io/post/duo-tou-zhu-yi-li-%EF%BC%88MHA%EF%BC%89-he-fen-zu-cha-xun-zhu-yi-li-%EF%BC%88GQA%EF%BC%89-de-wei-dai-ma-shi-xian.html</guid><pubDate>Wed, 12 Feb 2025 09:24:31 +0000</pubDate></item><item><title>Protobuf 序列化</title><link>https://jibinghu.github.io/post/Protobuf%20-xu-lie-hua.html</link><description>### Protocol Buffers (protobuf)

**Protocol Buffers (protobuf)** 是一种由 Google 开发的用于数据序列化的轻量级、高效的机制。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Protobuf%20-xu-lie-hua.html</guid><pubDate>Wed, 12 Feb 2025 05:40:52 +0000</pubDate></item><item><title>ps | pkill | killall COMMAND</title><link>https://jibinghu.github.io/post/ps%20-%20pkill%20-%20killall%20COMMAND.html</link><description>1. 使用 pkill 命令

pkill 允许你通过进程名来杀死所有与该名称匹配的进程，快捷而高效。</description><guid isPermaLink="true">https://jibinghu.github.io/post/ps%20-%20pkill%20-%20killall%20COMMAND.html</guid><pubDate>Wed, 12 Feb 2025 03:08:37 +0000</pubDate></item><item><title>Python 库 threading 库 Thread 类的用法</title><link>https://jibinghu.github.io/post/Python%20-ku-%20threading%20-ku-%20Thread%20-lei-de-yong-fa.html</link><description>`from threading import Thread` 是 Python 中用于导入 `Thread` 类的语句。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Python%20-ku-%20threading%20-ku-%20Thread%20-lei-de-yong-fa.html</guid><pubDate>Fri, 03 Jan 2025 03:11:36 +0000</pubDate></item><item><title>nvidia-smi 的使用方式</title><link>https://jibinghu.github.io/post/nvidia-smi%20-de-shi-yong-fang-shi.html</link><description>`nvidia-smi` 是 NVIDIA 提供的一个命令行工具，用于监控和管理 NVIDIA GPU 设备。</description><guid isPermaLink="true">https://jibinghu.github.io/post/nvidia-smi%20-de-shi-yong-fang-shi.html</guid><pubDate>Thu, 02 Jan 2025 08:58:57 +0000</pubDate></item><item><title>Shell 种类和路程</title><link>https://jibinghu.github.io/post/Shell%20-zhong-lei-he-lu-cheng.html</link><description>Linux 中有多种不同的 Shell，每种 Shell 都有其独特的功能和特点。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Shell%20-zhong-lei-he-lu-cheng.html</guid><pubDate>Tue, 31 Dec 2024 04:08:16 +0000</pubDate></item><item><title>GDB 调试备份</title><link>https://jibinghu.github.io/post/GDB%20-diao-shi-bei-fen.html</link><description>在使用 **gdb** (GNU Debugger) 进行调试时，有一些非常实用的命令，可以帮助你更高效地进行程序的调试。</description><guid isPermaLink="true">https://jibinghu.github.io/post/GDB%20-diao-shi-bei-fen.html</guid><pubDate>Tue, 31 Dec 2024 03:47:08 +0000</pubDate></item><item><title>LightRAG 脉络流程图</title><link>https://jibinghu.github.io/post/LightRAG%20-mai-luo-liu-cheng-tu.html</link><description>![image](https://github.com/user-attachments/assets/f25e5193-f07f-472d-8cd3-5ad72d6cd9e6)&#13;
。</description><guid isPermaLink="true">https://jibinghu.github.io/post/LightRAG%20-mai-luo-liu-cheng-tu.html</guid><pubDate>Sat, 28 Dec 2024 05:46:57 +0000</pubDate></item><item><title>docker 基本使用 -&gt; 基于 freeswitch</title><link>https://jibinghu.github.io/post/docker%20-ji-ben-shi-yong-%20--%20-ji-yu-%20freeswitch.html</link><description>### 拉取镜像：&#13;
`docker pull mmtnrw/freeswitch:latest`&#13;
&#13;
### 启动&#13;
运行镜像：&#13;
- 基本命令是下面一行，但是显然还需要端口映射等信息&#13;
&gt; docker run -d --name 89M_freeswitch mmtnrw/freeswitch:latest&#13;
&#13;
``` bash&#13;
&#13;
docker 中所有 freeswitch 安装目录：&#13;
&#13;
/ # find ./ -name 'freeswitch'&#13;
./var/lib/freeswitch&#13;
./var/run/freeswitch&#13;
./var/log/freeswitch&#13;
./etc/freeswitch&#13;
./usr/bin/freeswitch&#13;
./usr/share/freeswitch&#13;
./usr/lib/freeswitch&#13;
&#13;
mod 安装目录：/usr/lib/freeswitch/mod&#13;
&#13;
```。</description><guid isPermaLink="true">https://jibinghu.github.io/post/docker%20-ji-ben-shi-yong-%20--%20-ji-yu-%20freeswitch.html</guid><pubDate>Fri, 27 Dec 2024 13:44:01 +0000</pubDate></item><item><title>`CUDA_VISIBLE_DEVICE`在导入新文件后重映射的问题</title><link>https://jibinghu.github.io/post/%60CUDA_VISIBLE_DEVICE%60-zai-dao-ru-xin-wen-jian-hou-zhong-ying-she-de-wen-ti.html</link><description>打印出来的 CUDA_VISIBLE_DEVICES 是 '2,3'，但依然报错 RuntimeError: CUDA error: invalid device ordinal&#13;
&#13;
可能的原因及解决方法：&#13;
&#13;
1. CUDA_VISIBLE_DEVICES 和 GPU 设备编号的映射问题&#13;
&#13;
当你设置 CUDA_VISIBLE_DEVICES=2,3 时，系统实际上将只识别设备 cuda:2 和 cuda:3。</description><guid isPermaLink="true">https://jibinghu.github.io/post/%60CUDA_VISIBLE_DEVICE%60-zai-dao-ru-xin-wen-jian-hou-zhong-ying-she-de-wen-ti.html</guid><pubDate>Fri, 27 Dec 2024 07:19:10 +0000</pubDate></item><item><title>鉴权 </title><link>https://jibinghu.github.io/post/jian-quan-%20.html</link><description>## 鉴权是什么？&#13;
&#13;
**鉴权**（Authentication）是指在计算机系统、网络或应用程序中，确认用户或实体身份的过程。</description><guid isPermaLink="true">https://jibinghu.github.io/post/jian-quan-%20.html</guid><pubDate>Fri, 20 Dec 2024 07:18:43 +0000</pubDate></item><item><title>常见的嵌入模型</title><link>https://jibinghu.github.io/post/chang-jian-de-qian-ru-mo-xing.html</link><description>在 `SentenceTransformer` 中，除了 `BAAI_bge-m3`，还有许多其他常见的嵌入模型可以加载并用来生成文本嵌入。</description><guid isPermaLink="true">https://jibinghu.github.io/post/chang-jian-de-qian-ru-mo-xing.html</guid><pubDate>Thu, 19 Dec 2024 09:18:48 +0000</pubDate></item><item><title>浏览器的跨域请求</title><link>https://jibinghu.github.io/post/liu-lan-qi-de-kua-yu-qing-qiu.html</link><description>什么是跨域请求（CORS）？&#13;
&#13;
跨域请求（CORS，Cross-Origin Resource Sharing）是浏览器的一种安全机制，它限制了网页从一个域名（例如 example.com）去请求另一个域名（例如 api.example.com）的资源。</description><guid isPermaLink="true">https://jibinghu.github.io/post/liu-lan-qi-de-kua-yu-qing-qiu.html</guid><pubDate>Thu, 19 Dec 2024 09:14:33 +0000</pubDate></item><item><title>ufw 防火墙端口转发</title><link>https://jibinghu.github.io/post/ufw%20-fang-huo-qiang-duan-kou-zhuan-fa.html</link><description>&lt;img width='930' alt='image' src='https://github.com/user-attachments/assets/5441a304-3d08-44ed-b9cd-da4686a999c8' /&gt;&#13;
。</description><guid isPermaLink="true">https://jibinghu.github.io/post/ufw%20-fang-huo-qiang-duan-kou-zhuan-fa.html</guid><pubDate>Tue, 17 Dec 2024 09:30:12 +0000</pubDate></item><item><title>GNU Autotools 和 CMake/Make</title><link>https://jibinghu.github.io/post/GNU%20Autotools%20-he-%20CMake-Make.html</link><description>./bootstrap.sh 和 ./configure、make 以及 CMake 和 make 都是常见的自动化构建工具，但它们的工作方式和使用场景有所不同。</description><guid isPermaLink="true">https://jibinghu.github.io/post/GNU%20Autotools%20-he-%20CMake-Make.html</guid><pubDate>Tue, 17 Dec 2024 03:07:15 +0000</pubDate></item><item><title>docker commonly used inst.</title><link>https://jibinghu.github.io/post/docker%20commonly%20used%20inst..html</link><description># Docker详解及其使用方法&#13;
&#13;
Docker 是一个开源的应用容器化平台，提供一种轻量级虚拟化解决方案，用于打包、分发和运行应用程序及其依赖环境。</description><guid isPermaLink="true">https://jibinghu.github.io/post/docker%20commonly%20used%20inst..html</guid><pubDate>Sun, 15 Dec 2024 08:26:40 +0000</pubDate></item><item><title>SQLite 数据库常用命令</title><link>https://jibinghu.github.io/post/SQLite%20-shu-ju-ku-chang-yong-ming-ling.html</link><description>SQLite 数据库常用命令：&#13;
&#13;
``` sql&#13;
-- 1. 打开数据库文件&#13;
sqlite3 database.db&#13;
&#13;
-- 2. 显示所有表&#13;
.tables&#13;
&#13;
-- 3. 查看数据库结构（所有表的定义）&#13;
.schema&#13;
&#13;
-- 4. 查看某张表的结构&#13;
.schema table_name&#13;
&#13;
-- 5. 查看某张表的全部数据&#13;
SELECT * FROM table_name;&#13;
&#13;
-- 6. 查看前 N 行数据&#13;
SELECT * FROM table_name LIMIT N;&#13;
&#13;
-- 7. 统计表中的记录数&#13;
SELECT COUNT(*) FROM table_name;&#13;
&#13;
-- 8. 条件查询&#13;
SELECT * FROM table_name WHERE column_name = 'value';&#13;
&#13;
-- 9. 排序查询&#13;
SELECT * FROM table_name ORDER BY column_name ASC;   -- 升序&#13;
SELECT * FROM table_name ORDER BY column_name DESC;  -- 降序&#13;
&#13;
-- 10. 分组统计&#13;
SELECT column_name, COUNT(*) FROM table_name GROUP BY column_name;&#13;
&#13;
-- 11. 修改数据&#13;
UPDATE table_name SET column_name = 'new_value' WHERE condition;&#13;
&#13;
-- 12. 删除数据&#13;
DELETE FROM table_name WHERE condition;&#13;
&#13;
-- 13. 导出查询结果到 CSV 文件&#13;
.mode csv&#13;
.output output_file.csv&#13;
SELECT * FROM table_name;&#13;
.output stdout  -- 恢复输出到屏幕&#13;
&#13;
-- 14. 导入 CSV 文件到表&#13;
.mode csv&#13;
.import input_file.csv table_name&#13;
&#13;
-- 15. 设置输出格式&#13;
.mode column  -- 默认文本输出&#13;
.mode csv     -- CSV 格式输出&#13;
.mode table   -- 表格格式输出&#13;
&#13;
-- 16. 显示查询结果的标题&#13;
.headers on&#13;
&#13;
-- 17. 查看当前数据库文件&#13;
.databases&#13;
&#13;
-- 18. 清屏命令（适用于支持的终端）&#13;
.system clear&#13;
&#13;
-- 19. 显示帮助信息&#13;
.help&#13;
&#13;
-- 20. 退出 SQLite&#13;
.exit&#13;
.quit```。</description><guid isPermaLink="true">https://jibinghu.github.io/post/SQLite%20-shu-ju-ku-chang-yong-ming-ling.html</guid><pubDate>Sun, 15 Dec 2024 08:00:26 +0000</pubDate></item><item><title>ali ASR 接入log</title><link>https://jibinghu.github.io/post/ali%20ASR%20-jie-ru-log.html</link><description>```&#13;
2024-12-11 12:31:05.982418 98.23% [DEBUG] ali_asr_ws.c:691 ali_asr license used: 1&#13;
2024-12-11 12:31:05.982418 98.23% [INFO] ali_asr_ws.c:715 codec = L16, rate = 8000, dest = (null)&#13;
0193b3fb-b7e1-7969-962c-f95396b9994e 2024-12-11 12:31:05.982418 98.23% [DEBUG] switch_core_media_bug.c:1003 Attaching BUG detect_speech to sofia/public/15513689240&#13;
2024-12-11 12:31:05.982418 98.23% [NOTICE] ali_asr_ws.c:467 WS read thread start&#13;
2024-12-11 12:31:05.982418 98.23% [DEBUG] ali_asr_ws.c:474 Connecting to API WS socket wss://nls-gateway.cn-shanghai.aliyuncs.com/ws/v1&#13;
0193b3fb-b7e1-7969-962c-f95396b9994e 2024-12-11 12:31:05.982418 98.23% [INFO] billing.c:507 detect_speech media bug started&#13;
2024-12-11 12:31:05.982418 98.23% [DEBUG] ali_asr_ws.c:1128 start-input-timers = 1&#13;
2024-12-11 12:31:05.982418 98.23% [DEBUG] ali_asr_ws.c:1111 no-input-timeout = 5000&#13;
2024-12-11 12:31:05.982418 98.23% [DEBUG] ali_asr_ws.c:1119 speech-timeout = 15000&#13;
2024-12-11 12:31:05.982418 98.23% [DEBUG] ali_asr_ws.c:1166 add-punc = true&#13;
2024-12-11 12:31:05.982418 98.23% [DEBUG] ali_asr_ws.c:1236 enable-inverse-text-normalization = true&#13;
2024-12-11 12:31:05.982418 98.23% [INFO] ali_asr_ws.c:774 load grammar default&#13;
0193b3fb-b7e1-7969-962c-f95396b9994e 2024-12-11 12:31:05.982418 98.23% [DEBUG] switch_ivr_play_say.c:1561 Codec Activated L16@8000hz 1 channels 20ms&#13;
2024-12-11 12:31:06.222415 98.20% [INFO] ali_asr_ws.c:351 Websocket connected to [wss://nls-gateway.cn-shanghai.aliyuncs.com/ws/v1]&#13;
2024-12-11 12:31:06.222415 98.20% [INFO] ali_asr_ws.c:275 {'header':{'namespace':'SpeechTranscriber','name':'StartTranscription','task_id':'a426f3d4618447519c9d85d1a0d15bf6','message_id':'a426f3d4618447519c9d85d1a0d15bf6','appkey':'InIBfoN6rSWJhaOW'},'payload':{'format':'pcm','sample_rate':8000,'max_sentence_silence':500,'enable_punctuation_prediction':true,'enable_inverse_text_normalization':true},'context':{'sdk':{'name':'xswitch-nls-sdk-c','version':'1.0.0'}}}&#13;
0193b3fb-b7e1-7969-962c-f95396b9994e 2024-12-11 12:31:06.242417 98.20% [DEBUG] switch_core_io.c:448 Setting BUG Codec PCMA:8&#13;
2024-12-11 12:31:06.282416 98.20% [INFO] ali_asr_ws.c:522 {'header':{'namespace':'SpeechTranscriber','name':'TranscriptionStarted','status':20000000,'message_id':'acaeaef171f3411497c5f6333d0e35a3','task_id':'a426f3d4618447519c9d85d1a0d15bf6','status_text':'Gateway:SUCCESS:Success.'}}&#13;
2024-12-11 12:31:06.282416 98.20% [INFO] ali_asr_ws.c:534 TranscriptionStarted&#13;
0193b3fb-b7e1-7969-962c-f95396b9994e 2024-12-11 12:31:07.202414 98.20% [DEBUG] switch_ivr_play_say.c:2012 done playing file silence_stream://1000&#13;
2024-12-11 12:31:07.202414 98.20% [INFO] ali_asr_ws.c:1094 Input timers already started&#13;
0193b3fb-b7e1-7969-962c-f95396b9994e 2024-12-11 12:31:07.202414 98.20% [INFO] switch_ivr_async.c:5014 (sofia/public/15513689240) WAITING FOR RESULT&#13;
0193b3fb-b7e1-7969-962c-f95396b9994e 2024-12-11 12:31:07.202414 98.20% [DEBUG] switch_ivr.c:195 Codec Activated L16@8000hz 1 channels 20ms&#13;
2024-12-11 12:31:07.522428 98.20% [INFO] ali_asr_ws.c:522 {'header':{'namespace':'SpeechTranscriber','name':'SentenceBegin','status':20000000,'message_id':'a13068a127fe42bc955c8f203a088f35','task_id':'a426f3d4618447519c9d85d1a0d15bf6','status_text':'Gateway:SUCCESS:Success.'},'payload':{'index':1,'time':940}}&#13;
2024-12-11 12:31:07.522428 98.20% [INFO] ali_asr_ws.c:545 SentenceBegin&#13;
2024-12-11 12:31:07.542429 98.20% [DEBUG] ali_asr_ws.c:1059 Result: START OF SPEECH&#13;
0193b3fb-b7e1-7969-962c-f95396b9994e 2024-12-11 12:31:07.562425 98.20% [INFO] switch_ivr_async.c:4918 (sofia/public/15513689240) START OF SPEECH&#13;
0193b3fb-b7e1-7969-962c-f95396b9994e 2024-12-11 12:31:07.562425 98.20% [DEBUG] switch_ivr.c:195 Codec Activated L16@8000hz 1 channels 20ms&#13;
2024-12-11 12:31:09.222436 98.23% [INFO] ali_asr_ws.c:522 {'header':{'namespace':'SpeechTranscriber','name':'SentenceEnd','status':20000000,'message_id':'4baa38c45e02462d81c9b4e0db2260ae','task_id':'a426f3d4618447519c9d85d1a0d15bf6','status_text':'Gateway:SUCCESS:Success.'},'payload':{'index':1,'time':2620,'result':'是的是的是的是的。</description><guid isPermaLink="true">https://jibinghu.github.io/post/ali%20ASR%20-jie-ru-log.html</guid><pubDate>Wed, 11 Dec 2024 04:33:19 +0000</pubDate></item><item><title>xswitch接入自有asr记录</title><link>https://jibinghu.github.io/post/xswitch-jie-ru-zi-you-asr-ji-lu.html</link><description>&lt;img width='372' alt='image' src='https://github.com/user-attachments/assets/1ab89dce-ffb9-452e-a3bb-2dbaca537d6b'&gt;&#13;
&#13;
---&#13;
&#13;
1. autoload_configs 的位置&#13;
&#13;
在 FreeSWITCH 的安装目录中，autoload_configs 文件夹通常位于配置目录下：&#13;
&#13;
默认路径：&#13;
&#13;
/usr/local/freeswitch/conf/autoload_configs/&#13;
&#13;
如果找不到：&#13;
	•	如果你是从源代码编译安装的 FreeSWITCH，则安装目录通常为 /usr/local/freeswitch。</description><guid isPermaLink="true">https://jibinghu.github.io/post/xswitch-jie-ru-zi-you-asr-ji-lu.html</guid><pubDate>Tue, 10 Dec 2024 14:24:45 +0000</pubDate></item><item><title>fs_cli 命令记录</title><link>https://jibinghu.github.io/post/fs_cli%20-ming-ling-ji-lu.html</link><description>fs_cli&#13;
&#13;
`show dialplan`&#13;
&gt; 展示拨号计划（dialplan）模块&#13;
```&#13;
输出：&#13;
freeswitch@wanren4090&gt; show dialplan&#13;
type,name,ikey&#13;
dialplan,LUA,mod_lua&#13;
dialplan,XML,mod_dialplan_xml&#13;
dialplan,XUI,mod_xui&#13;
dialplan,inline,mod_dptools&#13;
&#13;
4 total.&#13;
```&#13;
&#13;
`show modules`&#13;
&gt; 展示已加载的（modules）模块&#13;
```&#13;
输出（部分）：&#13;
xswitch&gt;  show modules&#13;
type,name,ikey,filename&#13;
api,...,mod_commands,/usr/local/freeswitch/mod/mod_commands.so&#13;
api,acl,mod_commands,/usr/local/freeswitch/mod/mod_commands.so&#13;
api,ai,mod_ai,/usr/local/freeswitch/mod/mod_ai.so&#13;
api,ali_token,mod_ali,/usr/local/freeswitch/mod/mod_ali.so&#13;
api,alias,mod_commands,/usr/local/freeswitch/mod/mod_commands.so&#13;
api,av,mod_av,/usr/local/freeswitch/mod/mod_av.so&#13;
```。</description><guid isPermaLink="true">https://jibinghu.github.io/post/fs_cli%20-ming-ling-ji-lu.html</guid><pubDate>Tue, 10 Dec 2024 14:15:23 +0000</pubDate></item><item><title>XSwitch 的三种API 接口：XCC、AIAPI 和 XRTC </title><link>https://jibinghu.github.io/post/XSwitch%20-de-san-zhong-API%20-jie-kou-%EF%BC%9AXCC%E3%80%81AIAPI%20-he-%20XRTC%20.html</link><description>XSwitch 是一款电信级 IP 电话软交换系统和综合实时音视频多媒体通信平台，提供多种 API 接口以满足不同的开发需求。</description><guid isPermaLink="true">https://jibinghu.github.io/post/XSwitch%20-de-san-zhong-API%20-jie-kou-%EF%BC%9AXCC%E3%80%81AIAPI%20-he-%20XRTC%20.html</guid><pubDate>Tue, 10 Dec 2024 13:34:20 +0000</pubDate></item><item><title>FV3运行分析</title><link>https://jibinghu.github.io/post/FV3-yun-xing-fen-xi.html</link><description>对FV3运行日志分析：&#13;
&#13;
以下是对日志内容的分析，并逐条对应输出日志部分，以说明为何判断这份日志是 Demo 程序的正确执行。</description><guid isPermaLink="true">https://jibinghu.github.io/post/FV3-yun-xing-fen-xi.html</guid><pubDate>Tue, 10 Dec 2024 09:00:27 +0000</pubDate></item><item><title>FV3_运行日志记录</title><link>https://jibinghu.github.io/post/FV3_-yun-xing-ri-zhi-ji-lu.html</link><description>正常运行日志记录：timestep好像没有，模拟day=1:&#13;
&#13;
```&#13;
[acox11ust1@login01 jibinghu]$ ./AllocateNode.sh 2&#13;
salloc: Pending job allocation 3898&#13;
salloc: job 3898 queued and waiting for resources&#13;
salloc: job 3898 has been allocated resources&#13;
salloc: Granted job allocation 3898&#13;
salloc: Waiting for resource configuration&#13;
salloc: Nodes a01r3n[31-32] are ready for job&#13;
[acox11ust1@login01 jibinghu]$ cd fv3_source/ics_231207_checked/pubrel/&#13;
[acox11ust1@login01 pubrel]$ ./fv3run.sh &#13;
WARNING: INCLUDE_modshare exists ( /opt/hpc/software/mpi/hpcx/v2.12.0/ucx_without_rocm/include:1:/opt/hpc/software/mpi/hpcx/v2.12.0/gcc-8.3.1/include:1:/opt/hpc/software/mpi/hpcx/v2.12.0/sharp/include:1:/opt/hpc/software/mpi/hpcx/v2.12.0/hcoll/include:1 ), but INCLUDE doesn't. Environment is corrupted.&#13;
[0] MPI startup(): Intel(R) MPI Library, Version 2021.3  Build 20210601 (id: 6f90181f1)&#13;
[0] MPI startup(): Copyright (C) 2003-2021 Intel Corporation.  All rights reserved.&#13;
[0] MPI startup(): library kind: release&#13;
[0] MPI startup(): libfabric version: 1.12.1-impi&#13;
[0] MPI startup(): libfabric provider: verbs;ofi_rxm&#13;
[0] MPI startup(): File '/public/software/mpi/intelmpi/2021.3.0/etc/tuning_generic_shm-ofi_verbs-ofi-rxm.dat' not found&#13;
[0] MPI startup(): Load tuning file: '/public/software/mpi/intelmpi/2021.3.0/etc/tuning_generic_shm-ofi.dat'&#13;
[0] MPI startup(): Rank    Pid      Node name  Pin cpu&#13;
[0] MPI startup(): 0       29878    a01r3n31   {0,1,2,3,4,5,6,7}&#13;
[0] MPI startup(): 1       29879    a01r3n31   {8,9,10,11,12,13,14,15}&#13;
[0] MPI startup(): 2       29880    a01r3n31   {16,17,18,19,20,21,22,23}&#13;
[0] MPI startup(): 3       23881    a01r3n32   {24,25,26,27,28,29,30,31}&#13;
[0] MPI startup(): 4       23882    a01r3n32   {0,1,2,3,4,5,6,7}&#13;
[0] MPI startup(): 5       23883    a01r3n32   {8,9,10,11,12,13,14,15}&#13;
[0] MPI startup(): I_MPI_ROOT=/public/software/mpi/intelmpi/2021.3.0&#13;
[0] MPI startup(): I_MPI_MPIRUN=mpirun&#13;
[0] MPI startup(): I_MPI_HYDRA_TOPOLIB=hwloc&#13;
[0] MPI startup(): I_MPI_HYDRA_BOOTSTRAP=slurm&#13;
[0] MPI startup(): I_MPI_INTERNAL_MEM_POLICY=default&#13;
[0] MPI startup(): I_MPI_FABRICS=shm:ofi&#13;
[0] MPI startup(): I_MPI_DEBUG=5&#13;
[0] MPI startup(): I_MPI_STACKSIZE environment variable is not supported.&#13;
[0] MPI startup(): To check the list of supported variables, use the impi_info utility or refer to https://software.intel.com/en-us/mpi-library/documentation/get-started.&#13;
NOTE from PE    0: MPP_DOMAINS_SET_STACK_SIZE: stack size set to    32768.&#13;
 &amp;MPP_IO_NML&#13;
 HEADER_BUFFER_VAL       =       16384,&#13;
 GLOBAL_FIELD_ON_ROOT_PE = T,&#13;
 IO_CLOCKS_ON    = F&#13;
 /&#13;
NOTE from PE    0: MPP_IO_SET_STACK_SIZE: stack size set to     131072.&#13;
NOTE from PE    0: MPP_DOMAINS_SET_STACK_SIZE: stack size set to   900000.&#13;
                                         Memuse(MB) at fms_init=  5.050E+01  6.396E+01  5.368E+00  5.787E+01&#13;
 Starting PEs :            6&#13;
 Starting Threads :            0&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    3, ehalo =    3, shalo =    3, nhalo =    3&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    3, ehalo =    3, shalo =    3, nhalo =    3&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
whalo =    3, ehalo =    3, shalo =    3, nhalo =    3&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    3, ehalo =    3, shalo =    3, nhalo =    3&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    3, ehalo =    3, shalo =    3, nhalo =    3&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    1, ehalo =    1, shalo =    1, nhalo =    1&#13;
  X-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    1, ehalo =    1, shalo =    1, nhalo =    1&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    1, ehalo =    1, shalo =    1, nhalo =    1&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    1, ehalo =    1, shalo =    1, nhalo =    1&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    1, ehalo =    1, shalo =    1, nhalo =    1&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 For k_split (remapping)=           1&#13;
n_split is set to 11 for resolution-dt=0097x0097x6- 1800.000&#13;
Using n_sponge : 01&#13;
Using non_ortho :       T&#13;
NOTE from PE    0: MPP_DOMAINS_SET_STACK_SIZE: stack size set to  4000000.&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    3, ehalo =    3, shalo =    3, nhalo =    3&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    1, ehalo =    1, shalo =    1, nhalo =    1&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 ncnst=           4  num_prog=           4  pnats=           0  num_family=&#13;
           0&#13;
MAX    AREA (m*m): 0.13344276151023E+11          MIN AREA (m*m): 0.58324265963307E+10&#13;
GLOBAL AREA (m*m): 0.51006447191034E+15 IDEAL GLOBAL AREA (m*m): 0.51006447190979E+15&#13;
 &#13;
  Cubed-Sphere Grid Stats :           97 x          97 x           6&#13;
      Grid Length               : min:  81692.11 max: 115523.76 avg:  96476.08 min/max:      0.71&#13;
      Deviation from Orthogonal : min:      0.00 max:     29.55 avg:      8.81&#13;
      Aspect Ratio              : min:      1.00 max:      1.07 avg:      1.02&#13;
 &#13;
 da_max/da_min=   2.28794583705834     &#13;
 da_max_c/da_min_c=   2.29849446388365     &#13;
  &#13;
 Divergence damping Coefficients * 1.E6:&#13;
 For small dt=   163.636363636364     &#13;
 External mode del-2 (m**2/s)=  0.709638939210312     &#13;
 Internal mode del-2 SMAG dimensionless coeff=  0.000000000000000E+000&#13;
 Internal mode del-2 background diff=  0.000000000000000E+000&#13;
 Internal mode del-8 background diff=  0.160000000000000     &#13;
 Vorticity del-4 (m**4/s)=  0.000000000000000E+000&#13;
  &#13;
0001  0.29531250000000E-02  0.49062500000000E+01  0.26531068145124E+03 &#13;
0002  0.88239419291339E-02  0.12741633858268E+02  0.26663476584496E+03 &#13;
0003  0.16659325787402E-01  0.20577017716535E+02  0.25754289850161E+03 &#13;
0004  0.24494709645669E-01  0.28412401574803E+02  0.24721823575178E+03 &#13;
0005  0.32330093503937E-01  0.36247785433071E+02  0.23783995617442E+03 &#13;
0006  0.40165477362205E-01  0.44083169291339E+02  0.22992925585823E+03 &#13;
0007  0.48000861220472E-01  0.51918553149606E+02  0.22355776798706E+03 &#13;
0008  0.55836245078740E-01  0.59753937007874E+02  0.21863652802440E+03 &#13;
0009  0.63671628937008E-01  0.67589320866142E+02  0.21501508409462E+03 &#13;
0010  0.71507012795276E-01  0.75424704724409E+02  0.21252273383047E+03 &#13;
0011  0.79342396653543E-01  0.83260088582677E+02  0.21098775502103E+03 &#13;
0012  0.87177780511811E-01  0.91095472440945E+02  0.21024694342577E+03 &#13;
0013  0.95013164370079E-01  0.98930856299213E+02  0.21015040297888E+03 &#13;
0014  0.10284854822835E+00  0.10676624015748E+03  0.21056381478277E+03 &#13;
0015  0.11068393208661E+00  0.11460162401575E+03  0.21136927894282E+03 &#13;
0016  0.11851931594488E+00  0.12243700787402E+03  0.21246530557160E+03 &#13;
0017  0.12635469980315E+00  0.13027239173228E+03  0.21376627627899E+03 &#13;
0018  0.13419008366142E+00  0.13810777559055E+03  0.21520156395382E+03 &#13;
0019  0.14202546751969E+00  0.14594315944882E+03  0.21671442508611E+03 &#13;
0020  0.14986085137795E+00  0.15377854330709E+03  0.21826073655931E+03 &#13;
0021  0.15769623523622E+00  0.16161392716535E+03  0.21980762356864E+03 &#13;
0022  0.16553161909449E+00  0.16944931102362E+03  0.22133200972997E+03 &#13;
0023  0.17336700295276E+00  0.17728469488189E+03  0.22281911054638E+03 &#13;
0024  0.18120238681102E+00  0.18512007874016E+03  0.22426088495564E+03 &#13;
0025  0.18903777066929E+00  0.19295546259843E+03  0.22565445539093E+03 &#13;
0026  0.19687315452756E+00  0.20079084645669E+03  0.22700050387063E+03 &#13;
0027  0.20470853838583E+00  0.20862623031496E+03  0.22830165072567E+03 &#13;
0028  0.21254392224409E+00  0.21646161417323E+03  0.22956096134074E+03 &#13;
0029  0.22037930610236E+00  0.22429699803150E+03  0.23078125105127E+03 &#13;
0030  0.22821468996063E+00  0.23213238188976E+03  0.23196505382612E+03 &#13;
0031  0.23605007381890E+00  0.23996776574803E+03  0.23311465885249E+03 &#13;
0032  0.24388545767717E+00  0.24780314960630E+03  0.23423214142593E+03 &#13;
0033  0.25172084153543E+00  0.25563853346457E+03  0.23531938908579E+03 &#13;
0034  0.25955622539370E+00  0.26347391732283E+03  0.23637812385185E+03 &#13;
0035  0.26739160925197E+00  0.27130930118110E+03  0.23740992124250E+03 &#13;
0036  0.27522699311024E+00  0.27914468503937E+03  0.23841622662021E+03 &#13;
0037  0.28306237696850E+00  0.28698006889764E+03  0.23939836930448E+03 &#13;
0038  0.29089776082677E+00  0.29481545275591E+03  0.24035757481004E+03 &#13;
0039  0.29873314468504E+00  0.30265083661417E+03  0.24129497550260E+03 &#13;
0040  0.30656852854331E+00  0.31048622047244E+03  0.24221161991265E+03 &#13;
0041  0.31440391240157E+00  0.31832160433071E+03  0.24310848090584E+03 &#13;
0042  0.32223929625984E+00  0.32615698818898E+03  0.24398646287519E+03 &#13;
0043  0.33007468011811E+00  0.33399237204724E+03  0.24484640809291E+03 &#13;
0044  0.33791006397638E+00  0.34182775590551E+03  0.24568910233754E+03 &#13;
0045  0.34574544783465E+00  0.34966313976378E+03  0.24651527989373E+03 &#13;
0046  0.35358083169291E+00  0.35749852362205E+03  0.24732562800726E+03 &#13;
0047  0.36141621555118E+00  0.36533390748031E+03  0.24812079086520E+03 &#13;
0048  0.36925159940945E+00  0.37316929133858E+03  0.24890137316105E+03 &#13;
0049  0.37708698326772E+00  0.38100467519685E+03  0.24966794329580E+03 &#13;
0050  0.38492236712598E+00  0.38884005905512E+03  0.25042103625908E+03 &#13;
0051  0.39275775098425E+00  0.39667544291339E+03  0.25116115622785E+03 &#13;
0052  0.40059313484252E+00  0.40451082677165E+03  0.25188877891570E+03 &#13;
0053  0.40842851870079E+00  0.41234621062992E+03  0.25260435370085E+03 &#13;
0054  0.41626390255906E+00  0.42018159448819E+03  0.25330830555754E+03 &#13;
0055  0.42409928641732E+00  0.42801697834646E+03  0.25400103681243E+03 &#13;
0056  0.43193467027559E+00  0.43585236220472E+03  0.25468292874463E+03 &#13;
0057  0.43977005413386E+00  0.44368774606299E+03  0.25535434304592E+03 &#13;
0058  0.44760543799213E+00  0.45152312992126E+03  0.25601562315568E+03 &#13;
0059  0.45544082185039E+00  0.45935851377953E+03  0.25666709548318E+03 &#13;
0060  0.46327620570866E+00  0.46719389763779E+03  0.25730907052850E+03 &#13;
0061  0.47111158956693E+00  0.47502928149606E+03  0.25794184391219E+03 &#13;
0062  0.47894697342520E+00  0.48286466535433E+03  0.25856569732224E+03 &#13;
0063  0.48678235728346E+00  0.49070004921260E+03  0.25918089938651E+03 &#13;
0064  0.49461774114173E+00  0.49853543307087E+03  0.25978770647736E+03 &#13;
0065  0.50245312500000E+00  0.50637081692913E+03  0.26038636345486E+03 &#13;
0066  0.51028850885827E+00  0.51420620078740E+03  0.26097710435410E+03 &#13;
0067  0.51812389271654E+00  0.52204158464567E+03  0.26156015302163E+03 &#13;
0068  0.52595927657480E+00  0.52987696850394E+03  0.26213572370543E+03 &#13;
0069  0.53379466043307E+00  0.53771235236220E+03  0.26270402160257E+03 &#13;
0070  0.54163004429134E+00  0.54554773622047E+03  0.26326524336796E+03 &#13;
0071  0.54946542814961E+00  0.55338312007874E+03  0.26381957758775E+03 &#13;
0072  0.55730081200787E+00  0.56121850393701E+03  0.26436720522003E+03 &#13;
0073  0.56513619586614E+00  0.56905388779527E+03  0.26490830000570E+03 &#13;
0074  0.57297157972441E+00  0.57688927165354E+03  0.26544302885185E+03 &#13;
0075  0.58080696358268E+00  0.58472465551181E+03  0.26597155218981E+03 &#13;
0076  0.58864234744094E+00  0.59256003937008E+03  0.26649402430990E+03 &#13;
0077  0.59647773129921E+00  0.60039542322835E+03  0.26701059367469E+03 &#13;
0078  0.60431311515748E+00  0.60823080708661E+03  0.26752140321235E+03 &#13;
0079  0.61214849901575E+00  0.61606619094488E+03  0.26802659059174E+03 &#13;
0080  0.61998388287402E+00  0.62390157480315E+03  0.26852628848037E+03 &#13;
0081  0.62781926673228E+00  0.63173695866142E+03  0.26902062478669E+03 &#13;
0082  0.63565465059055E+00  0.63957234251968E+03  0.26950972288782E+03 &#13;
0083  0.64349003444882E+00  0.64740772637795E+03  0.26999370184364E+03 &#13;
0084  0.65132541830709E+00  0.65524311023622E+03  0.27047267659832E+03 &#13;
0085  0.65916080216535E+00  0.66307849409449E+03  0.27094675817022E+03 &#13;
0086  0.66699618602362E+00  0.67091387795275E+03  0.27141605383074E+03 &#13;
0087  0.67483156988189E+00  0.67874926181102E+03  0.27188066727316E+03 &#13;
0088  0.68266695374016E+00  0.68658464566929E+03  0.27234069877194E+03 &#13;
0089  0.69050233759843E+00  0.69442002952756E+03  0.27279624533321E+03 &#13;
0090  0.69833772145669E+00  0.70225541338583E+03  0.27324740083700E+03 &#13;
0091  0.70617310531496E+00  0.71009079724409E+03  0.27369425617176E+03 &#13;
0092  0.71400848917323E+00  0.71792618110236E+03  0.27413689936169E+03 &#13;
0093  0.72184387303150E+00  0.72576156496063E+03  0.27457541568731E+03 &#13;
0094  0.72967925688976E+00  0.73359694881890E+03  0.27500988779969E+03 &#13;
0095  0.73751464074803E+00  0.74143233267716E+03  0.27544039582877E+03 &#13;
0096  0.74535002460630E+00  0.74926771653543E+03  0.27586701748610E+03 &#13;
0097  0.75318540846457E+00  0.75710310039370E+03  0.27628982816242E+03 &#13;
0098  0.76102079232283E+00  0.76493848425197E+03  0.27670890102025E+03 &#13;
0099  0.76885617618110E+00  0.77277386811024E+03  0.27712430708191E+03 &#13;
0100  0.77669156003937E+00  0.78060925196850E+03  0.27753611531325E+03 &#13;
0101  0.78452694389764E+00  0.78844463582677E+03  0.27794439270322E+03 &#13;
0102  0.79236232775591E+00  0.79628001968504E+03  0.27834920433965E+03 &#13;
0103  0.80019771161417E+00  0.80411540354331E+03  0.27875061348139E+03 &#13;
0104  0.80803309547244E+00  0.81195078740157E+03  0.27914868162704E+03 &#13;
0105  0.81586847933071E+00  0.81978617125984E+03  0.27954346858047E+03 &#13;
0106  0.82370386318898E+00  0.82762155511811E+03  0.27993503251326E+03 &#13;
0107  0.83153924704724E+00  0.83545693897638E+03  0.28032343002430E+03 &#13;
0108  0.83937463090551E+00  0.84329232283465E+03  0.28070871619671E+03 &#13;
0109  0.84721001476378E+00  0.85112770669291E+03  0.28109094465209E+03 &#13;
0110  0.85504539862205E+00  0.85896309055118E+03  0.28147016760244E+03 &#13;
0111  0.86288078248031E+00  0.86679847440945E+03  0.28184643589976E+03 &#13;
0112  0.87071616633858E+00  0.87463385826772E+03  0.28221979908342E+03 &#13;
0113  0.87855155019685E+00  0.88246924212598E+03  0.28259030542551E+03 &#13;
0114  0.88638693405512E+00  0.89030462598425E+03  0.28295800197428E+03 &#13;
0115  0.89422231791339E+00  0.89814000984252E+03  0.28332293459560E+03 &#13;
0116  0.90205770177165E+00  0.90597539370079E+03  0.28368514801280E+03 &#13;
0117  0.90989308562992E+00  0.91381077755905E+03  0.28404468584473E+03 &#13;
0118  0.91772846948819E+00  0.92164616141732E+03  0.28440159064230E+03 &#13;
0119  0.92556385334646E+00  0.92948154527559E+03  0.28475590392351E+03 &#13;
0120  0.93339923720472E+00  0.93731692913386E+03  0.28510766620696E+03 &#13;
0121  0.94123462106299E+00  0.94515231299213E+03  0.28545691704414E+03 &#13;
0122  0.94907000492126E+00  0.95298769685039E+03  0.28580369505029E+03 &#13;
0123  0.95690538877953E+00  0.96082308070866E+03  0.28614803793411E+03 &#13;
0124  0.96474077263780E+00  0.96865846456693E+03  0.28648998252628E+03 &#13;
0125  0.97257615649606E+00  0.97649384842520E+03  0.28682956480679E+03 &#13;
0126  0.98041154035433E+00  0.98432923228346E+03  0.28716681993132E+03 &#13;
0127  0.98824692421260E+00  0.99216461614173E+03  0.28750178225652E+03 &#13;
0128  0.99608230807087E+00  0.10000000000000E+04  0.28783448536432E+03 &#13;
  &#13;
 Global Area=   510064471910337.     &#13;
 mean terrain height (m)=  9.913626027322558E-004&#13;
 Total surface pressure (mb) =    999.999999999994     &#13;
 &#13;
 fv_restart u    =    5967028512594690453&#13;
 fv_restart v    =   -7692853242191799093&#13;
 fv_restart delp =   -2181994019463161856&#13;
 fv_restart phis =    4914991103180051783&#13;
 fv_restart pt   =    7433948930651974799&#13;
 fv_init nq =           4  -6715205138635554816&#13;
 ZS max =    112.874125463318       min =   -315.642117444664     &#13;
 PS max =    1000.00000000000       min =    1000.00000000000     &#13;
 T  max =    309.808183006628       min =    209.223347977603     &#13;
 sphum max =   3.000000000000000E-006  min =   3.000000000000000E-006&#13;
 liq_wat max =   3.000000000000000E-006  min =   3.000000000000000E-006&#13;
 ice_wat max =   3.000000000000000E-006  min =   3.000000000000000E-006&#13;
 cld_amt max =   3.000000000000000E-006  min =   3.000000000000000E-006&#13;
 U  max =    34.9989158484801       min =   -34.9989158484801     &#13;
 V  max =    34.9989158484801       min =   -34.9989161814653     &#13;
 &#13;
 lin_cld_micrphys diagnostics initialized.&#13;
                                 Memuse(MB) at atmos_model_init=  4.475E+02  4.507E+02  1.045E+00  4.488E+02&#13;
 &#13;
   -----------------------------------------------------&#13;
      Block          User time  System Time   Total Time&#13;
   -----------------------------------------------------&#13;
   TOTAL                      557.3864       0.0000     557.3864&#13;
   FV_RESTART                  49.2071       0.0000      49.2071&#13;
   COMM_TOTAL                  11.9754       0.0000      11.9754&#13;
   FV_DYNAMICS                493.9743       0.0000     493.9743&#13;
   C_SW                        29.4985       0.0000      29.4985&#13;
   D_SW                       369.5266       0.0000     369.5266&#13;
   TRACER_2D                   19.4567       0.0000      19.4567&#13;
   COMM_TRAC                    0.2039       0.0000       0.2039&#13;
   REMAPPING                   16.3683       0.0000      16.3683&#13;
   FV_PHYS                      7.2409       0.0000       7.2409&#13;
   UPDATE_PHYS                  2.6932       0.0000       2.6932&#13;
    UPDATE_DWINDS               0.5913       0.0000       0.5913&#13;
   FV_DIAG                      6.2811       0.0000       6.2811&#13;
 &#13;
 &#13;
 fv_restart_end u    =    4397989828267125978&#13;
 fv_restart_end v    =   -2842069540584071737&#13;
 fv_restart_end delp =   -4009613896373628800&#13;
 fv_restart_end phis =    4914991103180051783&#13;
 fv_restart_end pt   =   -1339724932053717564&#13;
 fv_restart_end q    =   -1678801284657576475&#13;
 fv_restart_end q    =   -1678801284657576475&#13;
 fv_restart_end q    =   -1678801284657576475&#13;
 fv_restart_end q    =   -1678801284657576475&#13;
 ZS max =    112.874125463318       min =   -315.642117444664     &#13;
 PS max =    1004.54794746194       min =    997.822097387793     &#13;
 U  max =    34.1102598743495       min =   -34.1191210572457     &#13;
 V  max =    34.1153036160876       min =   -34.1306921330178     &#13;
 T  max =    310.695396957274       min =    208.953556948708     &#13;
NOTE from PE    0: mpp_io_connect.inc(mpp_open): io_domain exists for domain Cubic: cubed-sphere, optional argument fileset will be ignored&#13;
NOTE from PE    0: MPP_IO_SET_STACK_SIZE: stack size set to    1191936.&#13;
NOTE from PE    0: mpp_io_connect.inc(mpp_open): io_domain exists for domain Cubic: cubed-sphere, optional argument fileset will be ignored&#13;
NOTE from PE    0: mpp_io_connect.inc(mpp_open): io_domain exists for domain Cubic: cubed-sphere, optional argument fileset will be ignored&#13;
NOTE from PE    0: mpp_io_connect.inc(mpp_open): io_domain exists for domain Cubic: cubed-sphere, optional argument fileset will be ignored&#13;
NOTE from PE    0: mpp_io_connect.inc(mpp_open): io_domain exists for domain Cubic: cubed-sphere, optional argument fileset will be ignored&#13;
NOTE from PE    0: mpp_io_connect.inc(mpp_open): io_domain exists for domain Cubic: cubed-sphere, optional argument fileset will be ignored&#13;
NOTE from PE    0: mpp_io_connect.inc(mpp_open): io_domain exists for domain Cubic: cubed-sphere, optional argument fileset will be ignored&#13;
NOTE from PE    0: mpp_io_connect.inc(mpp_open): io_domain exists for domain Cubic: cubed-sphere, optional argument fileset will be ignored&#13;
 MPP_DOMAINS_STACK high water mark=     2383872&#13;
&#13;
Tabulating mpp_clock statistics across      6 PEs...&#13;
&#13;
                                          tmin          tmax          tavg          tstd  tfrac grain pemin pemax&#13;
Total runtime                       558.533781    558.536034    558.534790      0.000830  1.000     0     0     5&#13;
MAIN: initialization                 50.204609     50.208829     50.205556      0.001470  0.090     1     0     5&#13;
MAIN: time loop                     507.182123    507.190412    507.184842      0.003189  0.908     1     0     5&#13;
MAIN: termination                     0.600257      0.905622      0.742618      0.121957  0.001     1     0     5&#13;
Lin_cld_microphys                     0.000000      0.000000      0.000000      0.000000  0.000    41     0     5&#13;
 MPP_STACK high water mark=           0&#13;
```。</description><guid isPermaLink="true">https://jibinghu.github.io/post/FV3_-yun-xing-ri-zhi-ji-lu.html</guid><pubDate>Tue, 10 Dec 2024 08:51:03 +0000</pubDate></item><item><title>备份-》如何生成python项目需要的最小requirements.txt文件</title><link>https://jibinghu.github.io/post/bei-fen--%E3%80%8B-ru-he-sheng-cheng-python-xiang-mu-xu-yao-de-zui-xiao-requirements.txt-wen-jian.html</link><description>如何生成python项目需要的最小requirements.txt文件？ - 程序员coding的回答 - 知乎&#13;
https://www.zhihu.com/question/463332914/answer/3433457082&#13;
&#13;
作者：程序员coding&#13;
链接：https://www.zhihu.com/question/463332914/answer/3433457082&#13;
来源：知乎&#13;
著作权归作者所有。</description><guid isPermaLink="true">https://jibinghu.github.io/post/bei-fen--%E3%80%8B-ru-he-sheng-cheng-python-xiang-mu-xu-yao-de-zui-xiao-requirements.txt-wen-jian.html</guid><pubDate>Tue, 10 Dec 2024 07:54:18 +0000</pubDate></item><item><title>Linux find命令递归搜索当前目录及子目录文件夹</title><link>https://jibinghu.github.io/post/Linux%20find-ming-ling-di-gui-sou-suo-dang-qian-mu-lu-ji-zi-mu-lu-wen-jian-jia.html</link><description>`find . -type f -name 'input.nml'`&#13;
可以加一个反向过滤：&#13;
`find . -type f -name '*搜索的内容*' | grep -r '删除的内容' &gt; reserve.log`&#13;
。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Linux%20find-ming-ling-di-gui-sou-suo-dang-qian-mu-lu-ji-zi-mu-lu-wen-jian-jia.html</guid><pubDate>Tue, 10 Dec 2024 07:49:07 +0000</pubDate></item><item><title>计算机中科学计数法</title><link>https://jibinghu.github.io/post/ji-suan-ji-zhong-ke-xue-ji-shu-fa.html</link><description>在计算机中，`1e-6` 是科学计数法的表示方式，意思是 **1 × 10⁻⁶**，即 **0.000001**。</description><guid isPermaLink="true">https://jibinghu.github.io/post/ji-suan-ji-zhong-ke-xue-ji-shu-fa.html</guid><pubDate>Mon, 09 Dec 2024 14:08:43 +0000</pubDate></item><item><title>FV3运行记录_12/9</title><link>https://jibinghu.github.io/post/FV3-yun-xing-ji-lu-_12-9.html</link><description>执行的`NOTE from PE    0: MPP_IO_SET_STACK_SIZE: stack size set to    1179648.`在修改`fv_mp_mod.F90`文件中的对应&#13;
&lt;img width='469' alt='image' src='https://github.com/user-attachments/assets/8ecf9ccf-2682-4662-8d76-f93e45e87297'&gt;&#13;
部分后得到解决，原因是设置堆栈的代码必须在mpi_init和mpi_init_domain之间..&#13;
&#13;
&lt;img width='1345' alt='image' src='https://github.com/user-attachments/assets/c10246a9-f459-4738-9e9f-e101de3712be'&gt;&#13;
&#13;
目前开始正常执行了，但是速度超级慢...。</description><guid isPermaLink="true">https://jibinghu.github.io/post/FV3-yun-xing-ji-lu-_12-9.html</guid><pubDate>Mon, 09 Dec 2024 09:00:41 +0000</pubDate></item><item><title>FV3运行BUG解决</title><link>https://jibinghu.github.io/post/FV3-yun-xing-BUG-jie-jue.html</link><description>... 计算节点没申请&#13;
&#13;
``` bash&#13;
ERROR: Unable to locate a modulefile for 'compiler/cmake/3.22.0-rc1'&#13;
ERROR: Unable to locate a modulefile for 'apps/anaconda3/5.2.0'&#13;
ERROR: Unable to locate a modulefile for 'mathlib/fftw/3.3.8/double/intel'&#13;
ERROR: Unable to locate a modulefile for 'compiler/rocm/dtk-22.04.2'&#13;
ERROR: Unable to locate a modulefile for 'mathlib/netcdf/4.6.2/intel'&#13;
ERROR: Unable to locate a modulefile for 'mathlib/hdf5/1.8.12/intel'&#13;
srun: error: a01r4n05: task 3: Segmentation fault (core dumped)&#13;
srun: launch/slurm: _step_signal: Terminating StepId=2417.0&#13;
slurmstepd: error: *** STEP 2417.0 ON a01r4n02 CANCELLED AT 2024-12-04T22:23:57 ***&#13;
srun: error: a01r4n02: task 0: Segmentation fault (core dumped)&#13;
srun: error: a01r4n04: task 2: Segmentation fault (core dumped)&#13;
srun: error: a01r4n03: task 1: Segmentation fault (core dumped)&#13;
[mpiexec@a01r4n02] wait_proxies_to_terminate (../../../../../src/pm/i_hydra/mpiexec/intel/i_mpiexec.c:537): downstream from host a01r4n02 exited with status 139&#13;
[mpiexec@a01r4n02] main (../../../../../src/pm/i_hydra/mpiexec/mpiexec.c:2125): assert (pg-&gt;intel.exitcodes != NULL) failed&#13;
[mpiexec@a01r4n02] HYD_sock_write (../../../../../src/pm/i_hydra/libhydra/sock/hydra_sock_intel.c:360): write error (Bad file descriptor)&#13;
[mpiexec@a01r4n02] HYD_sock_write (../../../../../src/pm/i_hydra/libhydra/sock/hydra_sock_intel.c:360): write error (Bad file descriptor)&#13;
[mpiexec@a01r4n02] HYD_sock_write (../../../../../src/pm/i_hydra/libhydra/sock/hydra_sock_intel.c:360): write error (Bad file descriptor)&#13;
[mpiexec@a01r4n02] HYD_sock_write (../../../../../src/pm/i_hydra/libhydra/sock/hydra_sock_intel.c:360): write error (Bad file descriptor)&#13;
```。</description><guid isPermaLink="true">https://jibinghu.github.io/post/FV3-yun-xing-BUG-jie-jue.html</guid><pubDate>Thu, 05 Dec 2024 06:00:02 +0000</pubDate></item><item><title>12/5运行结果</title><link>https://jibinghu.github.io/post/12-5-yun-xing-jie-guo.html</link><description>``` bash&#13;
[acox11ust1@login01 pubrel]$ cp ../exp/exec.amd64/fms.x ./&#13;
[acox11ust1@login01 pubrel]$ ./fv3run.sh &#13;
[0] MPI startup(): Intel(R) MPI Library, Version 2021.3  Build 20210601 (id: 6f90181f1)&#13;
[0] MPI startup(): Copyright (C) 2003-2021 Intel Corporation.  All rights reserved.&#13;
[0] MPI startup(): library kind: release&#13;
[0] MPI startup(): libfabric version: 1.12.1-impi&#13;
[0] MPI startup(): libfabric provider: verbs;ofi_rxm&#13;
[0] MPI startup(): File '/public/software/mpi/intelmpi/2021.3.0/etc/tuning_generic_shm-ofi_verbs-ofi-rxm.dat' not found&#13;
[0] MPI startup(): Load tuning file: '/public/software/mpi/intelmpi/2021.3.0/etc/tuning_generic_shm-ofi.dat'&#13;
[0] MPI startup(): Rank    Pid      Node name  Pin cpu&#13;
[0] MPI startup(): 0       27855    a01r4n31   {0,1,2,3,4,5,6,7}&#13;
[0] MPI startup(): 1       27856    a01r4n31   {8,9,10,11,12,13,14,15}&#13;
[0] MPI startup(): 2       27857    a01r4n31   {16,17,18,19,20,21,22,23}&#13;
[0] MPI startup(): 3       27858    a01r4n31   {24,25,26,27,28,29,30,31}&#13;
[0] MPI startup(): 4       12945    a01r4n32   {0,1,2,3,4,5,6,7}&#13;
[0] MPI startup(): 5       12946    a01r4n32   {8,9,10,11,12,13,14,15}&#13;
[0] MPI startup(): I_MPI_CC=icc&#13;
[0] MPI startup(): I_MPI_CXX=icc&#13;
[0] MPI startup(): I_MPI_F90=ifort&#13;
[0] MPI startup(): I_MPI_ROOT=/public/software/mpi/intelmpi/2021.3.0&#13;
[0] MPI startup(): I_MPI_MPIRUN=mpirun&#13;
[0] MPI startup(): I_MPI_HYDRA_TOPOLIB=hwloc&#13;
[0] MPI startup(): I_MPI_HYDRA_BOOTSTRAP=slurm&#13;
[0] MPI startup(): I_MPI_INTERNAL_MEM_POLICY=default&#13;
[0] MPI startup(): I_MPI_FABRICS=shm:ofi&#13;
[0] MPI startup(): I_MPI_DEBUG=5&#13;
NOTE from PE    0: MPP_DOMAINS_SET_STACK_SIZE: stack size set to    32768.&#13;
 &amp;MPP_IO_NML&#13;
 HEADER_BUFFER_VAL       =       16384,&#13;
 GLOBAL_FIELD_ON_ROOT_PE = T,&#13;
 IO_CLOCKS_ON    = F&#13;
 /&#13;
NOTE from PE    0: MPP_IO_SET_STACK_SIZE: stack size set to     131072.&#13;
NOTE from PE    0: MPP_DOMAINS_SET_STACK_SIZE: stack size set to   900000.&#13;
                                         Memuse(MB) at fms_init=  5.040E+01  6.191E+01  5.094E+00  5.411E+01&#13;
 Starting PEs :            6&#13;
 Starting Threads :            0&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    3, ehalo =    3, shalo =    3, nhalo =    3&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    3, ehalo =    3, shalo =    3, nhalo =    3&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    3, ehalo =    3, shalo =    3, nhalo =    3&#13;
  X-AXIS =   96&#13;
whalo =    3, ehalo =    3, shalo =    3, nhalo =    3&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    3, ehalo =    3, shalo =    3, nhalo =    3&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    1, ehalo =    1, shalo =    1, nhalo =    1&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    1, ehalo =    1, shalo =    1, nhalo =    1&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    1, ehalo =    1, shalo =    1, nhalo =    1&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    1, ehalo =    1, shalo =    1, nhalo =    1&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    1, ehalo =    1, shalo =    1, nhalo =    1&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 For k_split (remapping)=           1&#13;
n_split is set to 11 for resolution-dt=0097x0097x6- 1800.000&#13;
Using n_sponge : 01&#13;
Using non_ortho :       T&#13;
NOTE from PE    0: MPP_DOMAINS_SET_STACK_SIZE: stack size set to  1500000.&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    3, ehalo =    3, shalo =    3, nhalo =    3&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 Cubic: cubed-sphere domain decomposition&#13;
whalo =    1, ehalo =    1, shalo =    1, nhalo =    1&#13;
  X-AXIS =   96&#13;
  Y-AXIS =   96&#13;
 ncnst=           4  num_prog=           4  pnats=           0  num_family=&#13;
           0&#13;
MAX    AREA (m*m): 0.13344276151023E+11          MIN AREA (m*m): 0.58324265963307E+10&#13;
GLOBAL AREA (m*m): 0.51006447191034E+15 IDEAL GLOBAL AREA (m*m): 0.51006447190979E+15&#13;
 &#13;
  Cubed-Sphere Grid Stats :           97 x          97 x           6&#13;
      Grid Length               : min:  81692.11 max: 115523.76 avg:  96476.08 min/max:      0.71&#13;
      Deviation from Orthogonal : min:      0.00 max:     29.55 avg:      8.81&#13;
      Aspect Ratio              : min:      1.00 max:      1.07 avg:      1.02&#13;
 &#13;
 da_max/da_min=   2.28794583705834     &#13;
 da_max_c/da_min_c=   2.29849446388365     &#13;
  &#13;
 Divergence damping Coefficients * 1.E6:&#13;
 For small dt=   163.636363636364     &#13;
 External mode del-2 (m**2/s)=  0.709638939210312     &#13;
 Internal mode del-2 SMAG dimensionless coeff=  0.000000000000000E+000&#13;
 Internal mode del-2 background diff=  0.000000000000000E+000&#13;
 Internal mode del-8 background diff=  0.160000000000000     &#13;
 Vorticity del-4 (m**4/s)=  0.000000000000000E+000&#13;
  &#13;
0001  0.29531250000000E-02  0.49062500000000E+01  0.26531068145124E+03 &#13;
0002  0.88239419291339E-02  0.12741633858268E+02  0.26663476584496E+03 &#13;
0003  0.16659325787402E-01  0.20577017716535E+02  0.25754289850161E+03 &#13;
0004  0.24494709645669E-01  0.28412401574803E+02  0.24721823575178E+03 &#13;
0005  0.32330093503937E-01  0.36247785433071E+02  0.23783995617442E+03 &#13;
0006  0.40165477362205E-01  0.44083169291339E+02  0.22992925585823E+03 &#13;
0007  0.48000861220472E-01  0.51918553149606E+02  0.22355776798706E+03 &#13;
0008  0.55836245078740E-01  0.59753937007874E+02  0.21863652802440E+03 &#13;
0009  0.63671628937008E-01  0.67589320866142E+02  0.21501508409462E+03 &#13;
0010  0.71507012795276E-01  0.75424704724409E+02  0.21252273383047E+03 &#13;
0011  0.79342396653543E-01  0.83260088582677E+02  0.21098775502103E+03 &#13;
0012  0.87177780511811E-01  0.91095472440945E+02  0.21024694342577E+03 &#13;
0013  0.95013164370079E-01  0.98930856299213E+02  0.21015040297888E+03 &#13;
0014  0.10284854822835E+00  0.10676624015748E+03  0.21056381478277E+03 &#13;
0015  0.11068393208661E+00  0.11460162401575E+03  0.21136927894282E+03 &#13;
0016  0.11851931594488E+00  0.12243700787402E+03  0.21246530557160E+03 &#13;
0017  0.12635469980315E+00  0.13027239173228E+03  0.21376627627899E+03 &#13;
0018  0.13419008366142E+00  0.13810777559055E+03  0.21520156395382E+03 &#13;
0019  0.14202546751969E+00  0.14594315944882E+03  0.21671442508611E+03 &#13;
0020  0.14986085137795E+00  0.15377854330709E+03  0.21826073655931E+03 &#13;
0021  0.15769623523622E+00  0.16161392716535E+03  0.21980762356864E+03 &#13;
0022  0.16553161909449E+00  0.16944931102362E+03  0.22133200972997E+03 &#13;
0023  0.17336700295276E+00  0.17728469488189E+03  0.22281911054638E+03 &#13;
0024  0.18120238681102E+00  0.18512007874016E+03  0.22426088495564E+03 &#13;
0025  0.18903777066929E+00  0.19295546259843E+03  0.22565445539093E+03 &#13;
0026  0.19687315452756E+00  0.20079084645669E+03  0.22700050387063E+03 &#13;
0027  0.20470853838583E+00  0.20862623031496E+03  0.22830165072567E+03 &#13;
0028  0.21254392224409E+00  0.21646161417323E+03  0.22956096134074E+03 &#13;
0029  0.22037930610236E+00  0.22429699803150E+03  0.23078125105127E+03 &#13;
0030  0.22821468996063E+00  0.23213238188976E+03  0.23196505382612E+03 &#13;
0031  0.23605007381890E+00  0.23996776574803E+03  0.23311465885249E+03 &#13;
0032  0.24388545767717E+00  0.24780314960630E+03  0.23423214142593E+03 &#13;
0033  0.25172084153543E+00  0.25563853346457E+03  0.23531938908579E+03 &#13;
0034  0.25955622539370E+00  0.26347391732283E+03  0.23637812385185E+03 &#13;
0035  0.26739160925197E+00  0.27130930118110E+03  0.23740992124250E+03 &#13;
0036  0.27522699311024E+00  0.27914468503937E+03  0.23841622662021E+03 &#13;
0037  0.28306237696850E+00  0.28698006889764E+03  0.23939836930448E+03 &#13;
0038  0.29089776082677E+00  0.29481545275591E+03  0.24035757481004E+03 &#13;
0039  0.29873314468504E+00  0.30265083661417E+03  0.24129497550260E+03 &#13;
0040  0.30656852854331E+00  0.31048622047244E+03  0.24221161991265E+03 &#13;
0041  0.31440391240157E+00  0.31832160433071E+03  0.24310848090584E+03 &#13;
0042  0.32223929625984E+00  0.32615698818898E+03  0.24398646287519E+03 &#13;
0043  0.33007468011811E+00  0.33399237204724E+03  0.24484640809291E+03 &#13;
0044  0.33791006397638E+00  0.34182775590551E+03  0.24568910233754E+03 &#13;
0045  0.34574544783465E+00  0.34966313976378E+03  0.24651527989373E+03 &#13;
0046  0.35358083169291E+00  0.35749852362205E+03  0.24732562800726E+03 &#13;
0047  0.36141621555118E+00  0.36533390748031E+03  0.24812079086520E+03 &#13;
0048  0.36925159940945E+00  0.37316929133858E+03  0.24890137316105E+03 &#13;
0049  0.37708698326772E+00  0.38100467519685E+03  0.24966794329580E+03 &#13;
0050  0.38492236712598E+00  0.38884005905512E+03  0.25042103625908E+03 &#13;
0051  0.39275775098425E+00  0.39667544291339E+03  0.25116115622785E+03 &#13;
0052  0.40059313484252E+00  0.40451082677165E+03  0.25188877891570E+03 &#13;
0053  0.40842851870079E+00  0.41234621062992E+03  0.25260435370085E+03 &#13;
0054  0.41626390255906E+00  0.42018159448819E+03  0.25330830555754E+03 &#13;
0055  0.42409928641732E+00  0.42801697834646E+03  0.25400103681243E+03 &#13;
0056  0.43193467027559E+00  0.43585236220472E+03  0.25468292874463E+03 &#13;
0057  0.43977005413386E+00  0.44368774606299E+03  0.25535434304592E+03 &#13;
0058  0.44760543799213E+00  0.45152312992126E+03  0.25601562315568E+03 &#13;
0059  0.45544082185039E+00  0.45935851377953E+03  0.25666709548318E+03 &#13;
0060  0.46327620570866E+00  0.46719389763779E+03  0.25730907052850E+03 &#13;
0061  0.47111158956693E+00  0.47502928149606E+03  0.25794184391219E+03 &#13;
0062  0.47894697342520E+00  0.48286466535433E+03  0.25856569732224E+03 &#13;
0063  0.48678235728346E+00  0.49070004921260E+03  0.25918089938651E+03 &#13;
0064  0.49461774114173E+00  0.49853543307087E+03  0.25978770647736E+03 &#13;
0065  0.50245312500000E+00  0.50637081692913E+03  0.26038636345486E+03 &#13;
0066  0.51028850885827E+00  0.51420620078740E+03  0.26097710435410E+03 &#13;
0067  0.51812389271654E+00  0.52204158464567E+03  0.26156015302163E+03 &#13;
0068  0.52595927657480E+00  0.52987696850394E+03  0.26213572370543E+03 &#13;
0069  0.53379466043307E+00  0.53771235236220E+03  0.26270402160257E+03 &#13;
0070  0.54163004429134E+00  0.54554773622047E+03  0.26326524336796E+03 &#13;
0071  0.54946542814961E+00  0.55338312007874E+03  0.26381957758775E+03 &#13;
0072  0.55730081200787E+00  0.56121850393701E+03  0.26436720522003E+03 &#13;
0073  0.56513619586614E+00  0.56905388779527E+03  0.26490830000570E+03 &#13;
0074  0.57297157972441E+00  0.57688927165354E+03  0.26544302885185E+03 &#13;
0075  0.58080696358268E+00  0.58472465551181E+03  0.26597155218981E+03 &#13;
0076  0.58864234744094E+00  0.59256003937008E+03  0.26649402430990E+03 &#13;
0077  0.59647773129921E+00  0.60039542322835E+03  0.26701059367469E+03 &#13;
0078  0.60431311515748E+00  0.60823080708661E+03  0.26752140321235E+03 &#13;
0079  0.61214849901575E+00  0.61606619094488E+03  0.26802659059174E+03 &#13;
0080  0.61998388287402E+00  0.62390157480315E+03  0.26852628848037E+03 &#13;
0081  0.62781926673228E+00  0.63173695866142E+03  0.26902062478669E+03 &#13;
0082  0.63565465059055E+00  0.63957234251968E+03  0.26950972288782E+03 &#13;
0083  0.64349003444882E+00  0.64740772637795E+03  0.26999370184364E+03 &#13;
0084  0.65132541830709E+00  0.65524311023622E+03  0.27047267659832E+03 &#13;
0085  0.65916080216535E+00  0.66307849409449E+03  0.27094675817022E+03 &#13;
0086  0.66699618602362E+00  0.67091387795275E+03  0.27141605383074E+03 &#13;
0087  0.67483156988189E+00  0.67874926181102E+03  0.27188066727316E+03 &#13;
0088  0.68266695374016E+00  0.68658464566929E+03  0.27234069877194E+03 &#13;
0089  0.69050233759843E+00  0.69442002952756E+03  0.27279624533321E+03 &#13;
0090  0.69833772145669E+00  0.70225541338583E+03  0.27324740083700E+03 &#13;
0091  0.70617310531496E+00  0.71009079724409E+03  0.27369425617176E+03 &#13;
0092  0.71400848917323E+00  0.71792618110236E+03  0.27413689936169E+03 &#13;
0093  0.72184387303150E+00  0.72576156496063E+03  0.27457541568731E+03 &#13;
0094  0.72967925688976E+00  0.73359694881890E+03  0.27500988779969E+03 &#13;
0095  0.73751464074803E+00  0.74143233267716E+03  0.27544039582877E+03 &#13;
0096  0.74535002460630E+00  0.74926771653543E+03  0.27586701748610E+03 &#13;
0097  0.75318540846457E+00  0.75710310039370E+03  0.27628982816242E+03 &#13;
0098  0.76102079232283E+00  0.76493848425197E+03  0.27670890102025E+03 &#13;
0099  0.76885617618110E+00  0.77277386811024E+03  0.27712430708191E+03 &#13;
0100  0.77669156003937E+00  0.78060925196850E+03  0.27753611531325E+03 &#13;
0101  0.78452694389764E+00  0.78844463582677E+03  0.27794439270322E+03 &#13;
0102  0.79236232775591E+00  0.79628001968504E+03  0.27834920433965E+03 &#13;
0103  0.80019771161417E+00  0.80411540354331E+03  0.27875061348139E+03 &#13;
0104  0.80803309547244E+00  0.81195078740157E+03  0.27914868162704E+03 &#13;
0105  0.81586847933071E+00  0.81978617125984E+03  0.27954346858047E+03 &#13;
0106  0.82370386318898E+00  0.82762155511811E+03  0.27993503251326E+03 &#13;
0107  0.83153924704724E+00  0.83545693897638E+03  0.28032343002430E+03 &#13;
0108  0.83937463090551E+00  0.84329232283465E+03  0.28070871619671E+03 &#13;
0109  0.84721001476378E+00  0.85112770669291E+03  0.28109094465209E+03 &#13;
0110  0.85504539862205E+00  0.85896309055118E+03  0.28147016760244E+03 &#13;
0111  0.86288078248031E+00  0.86679847440945E+03  0.28184643589976E+03 &#13;
0112  0.87071616633858E+00  0.87463385826772E+03  0.28221979908342E+03 &#13;
0113  0.87855155019685E+00  0.88246924212598E+03  0.28259030542551E+03 &#13;
0114  0.88638693405512E+00  0.89030462598425E+03  0.28295800197428E+03 &#13;
0115  0.89422231791339E+00  0.89814000984252E+03  0.28332293459560E+03 &#13;
0116  0.90205770177165E+00  0.90597539370079E+03  0.28368514801280E+03 &#13;
0117  0.90989308562992E+00  0.91381077755905E+03  0.28404468584473E+03 &#13;
0118  0.91772846948819E+00  0.92164616141732E+03  0.28440159064230E+03 &#13;
0119  0.92556385334646E+00  0.92948154527559E+03  0.28475590392351E+03 &#13;
0120  0.93339923720472E+00  0.93731692913386E+03  0.28510766620696E+03 &#13;
0121  0.94123462106299E+00  0.94515231299213E+03  0.28545691704414E+03 &#13;
0122  0.94907000492126E+00  0.95298769685039E+03  0.28580369505029E+03 &#13;
0123  0.95690538877953E+00  0.96082308070866E+03  0.28614803793411E+03 &#13;
0124  0.96474077263780E+00  0.96865846456693E+03  0.28648998252628E+03 &#13;
0125  0.97257615649606E+00  0.97649384842520E+03  0.28682956480679E+03 &#13;
0126  0.98041154035433E+00  0.98432923228346E+03  0.28716681993132E+03 &#13;
0127  0.98824692421260E+00  0.99216461614173E+03  0.28750178225652E+03 &#13;
0128  0.99608230807087E+00  0.10000000000000E+04  0.28783448536432E+03 &#13;
  &#13;
 Global Area=   510064471910337.     &#13;
 mean terrain height (m)=  9.913626027322558E-004&#13;
 Total surface pressure (mb) =    999.999999999994     &#13;
 &#13;
 fv_restart u    =    5967028512594690453&#13;
 fv_restart v    =   -7692853242191799093&#13;
 fv_restart delp =   -2181994019463161856&#13;
 fv_restart phis =    4914991103180051783&#13;
 fv_restart pt   =    7433948930651974799&#13;
 fv_init nq =           4  -6715205138635554816&#13;
 ZS max =    112.874125463318       min =   -315.642117444664     &#13;
 PS max =    1000.00000000000       min =    1000.00000000000     &#13;
 T  max =    309.808183006628       min =    209.223347977603     &#13;
 sphum max =   3.000000000000000E-006  min =   3.000000000000000E-006&#13;
 liq_wat max =   3.000000000000000E-006  min =   3.000000000000000E-006&#13;
 ice_wat max =   3.000000000000000E-006  min =   3.000000000000000E-006&#13;
 cld_amt max =   3.000000000000000E-006  min =   3.000000000000000E-006&#13;
 U  max =    34.9989158484801       min =   -34.9989158484801     &#13;
 V  max =    34.9989158484801       min =   -34.9989161814653     &#13;
 &#13;
 lin_cld_micrphys diagnostics initialized.&#13;
                                 Memuse(MB) at atmos_model_init=  4.473E+02  4.508E+02  1.318E+00  4.485E+02&#13;
&#13;
&#13;
NOTE from PE    0: mpp_io_connect.inc(mpp_open): io_domain exists for domain Cubic: cubed-sphere, optional argument fileset will be ignored&#13;
&#13;
FATAL from PE    4: MPP_DO_GLOBAL_FIELD user stack overflow: call mpp_domains_set_stack_size( 2359296) from all PEs.&#13;
&#13;
&#13;
FATAL from PE    0: MPP_DO_GLOBAL_FIELD user stack overflow: call mpp_domains_set_stack_size( 2359296) from all PEs.&#13;
&#13;
&#13;
FATAL from PE    0: MPP_DO_GLOBAL_FIELD user stack overflow: call mpp_domains_set_stack_size( 2359296) from all PEs.&#13;
&#13;
Abort(1) on node 0 (rank 0 in comm 0): application called MPI_Abort(MPI_COMM_WORLD, 1) - process 0&#13;
Abort(1) on node 4 (rank 4 in comm 0): application called MPI_Abort(MPI_COMM_WORLD, 1) - process 4&#13;
```。</description><guid isPermaLink="true">https://jibinghu.github.io/post/12-5-yun-xing-jie-guo.html</guid><pubDate>Thu, 05 Dec 2024 03:14:29 +0000</pubDate></item><item><title>FV3_DCU命令</title><link>https://jibinghu.github.io/post/FV3_DCU-ming-ling.html</link><description>查看所有节点的分区信息：&#13;
&#13;
``` bash&#13;
[acox11ust1@login02 pubrel]$ sinfo&#13;
PARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST&#13;
work         up   infinite      3 drain* a01r4n[35,38-39]&#13;
work         up   infinite      1   drng a01r4n33&#13;
work         up   infinite      3  drain a01r4n[25,34,37]&#13;
work         up   infinite      1    mix a01r4n26&#13;
work         up   infinite      8  alloc a01r4n[00-01,27-32]&#13;
work         up   infinite     24   idle a01r4n[02-24,36]&#13;
[acox11ust1@login02 pubrel]$ Web console: https://a01r2n00:9090/&#13;
```&#13;
&#13;
查看当前节点的分区信息：&#13;
&#13;
`sinfo -N -n $(hostname)`。</description><guid isPermaLink="true">https://jibinghu.github.io/post/FV3_DCU-ming-ling.html</guid><pubDate>Wed, 04 Dec 2024 15:08:27 +0000</pubDate></item><item><title>FV3_学习</title><link>https://jibinghu.github.io/post/FV3_-xue-xi.html</link><description>&lt;img width='719' alt='image' src='https://github.com/user-attachments/assets/3226f95b-f32e-460b-8698-6238a4ec8e41'&gt;&#13;
&#13;
![image](https://github.com/user-attachments/assets/12c07b7f-e083-43a1-8389-93edca2d1d94)&#13;
&#13;
这张图描述了 GFDL 模型（FV3 动力核心） 的工作流程，展示了从初始化到动力学求解、物理量计算和最终输出的完整过程。</description><guid isPermaLink="true">https://jibinghu.github.io/post/FV3_-xue-xi.html</guid><pubDate>Wed, 04 Dec 2024 09:43:34 +0000</pubDate></item><item><title>FV3_学习 FAQ</title><link>https://jibinghu.github.io/post/FV3_-xue-xi-%20FAQ.html</link><description>---&#13;
&#13;
### 如何将地球分为六个立方体面？&#13;
&#13;
1. 构建立方体：&#13;
- 在球体内部放置一个立方体，使得立方体的八个角与球体表面相切。</description><guid isPermaLink="true">https://jibinghu.github.io/post/FV3_-xue-xi-%20FAQ.html</guid><pubDate>Wed, 04 Dec 2024 02:07:06 +0000</pubDate></item><item><title>FV3 运行BUG记录 -&gt;&gt;&gt; #3</title><link>https://jibinghu.github.io/post/FV3%20-yun-xing-BUG-ji-lu-%20----%20%233.html</link><description>``` bash&#13;
[acox11ust1@login02 pubrel]$ ./fms.x mpirun -np=24&#13;
[0] MPI startup(): FI_PSM3_UUID was not generated, please set it to avoid possible resources ownership conflicts between MPI processes&#13;
login02:pid12135.fms.x: unknown link speed 0x80&#13;
login02:pid12135.fms.x: Failed to modify UD QP to INIT on mlx5_0: Operation not permitted&#13;
Abort(1615503) on node 0 (rank 0 in comm 0): Fatal error in PMPI_Init: Other MPI error, error stack:&#13;
MPIR_Init_thread(138)........: &#13;
MPID_Init(1169)..............: &#13;
MPIDI_OFI_mpi_init_hook(1807): &#13;
create_endpoint(2473)........: OFI endpoint open failed (ofi_init.c:2473:create_endpoint:Invalid argument)&#13;
```&#13;
&#13;
&gt; 遇事不决先问GPT：&#13;
&#13;
---&#13;
&#13;
1. FI_PSM3_UUID 问题&#13;
   错误信息中提到 FI_PSM3_UUID 没有生成。</description><guid isPermaLink="true">https://jibinghu.github.io/post/FV3%20-yun-xing-BUG-ji-lu-%20----%20%233.html</guid><pubDate>Mon, 02 Dec 2024 08:36:14 +0000</pubDate></item><item><title>BLAS库</title><link>https://jibinghu.github.io/post/BLAS-ku.html</link><description>什么是 BLAS？&#13;
&#13;
BLAS（Basic Linear Algebra Subprograms）是一组标准化的线性代数计算例程，广泛用于科学计算和高性能计算领域。</description><guid isPermaLink="true">https://jibinghu.github.io/post/BLAS-ku.html</guid><pubDate>Thu, 28 Nov 2024 06:54:22 +0000</pubDate></item><item><title>FV_3 系列学习002-&gt;天气预报数值求解方程组</title><link>https://jibinghu.github.io/post/FV_3%20-xi-lie-xue-xi-002---tian-qi-yu-bao-shu-zhi-qiu-jie-fang-cheng-zu.html</link><description>流体力学和热力学的基本定律，通常用于描述大气或流体中的运动和能量变化。</description><guid isPermaLink="true">https://jibinghu.github.io/post/FV_3%20-xi-lie-xue-xi-002---tian-qi-yu-bao-shu-zhi-qiu-jie-fang-cheng-zu.html</guid><pubDate>Thu, 28 Nov 2024 06:52:22 +0000</pubDate></item><item><title>WebRTC 相关学习 #1</title><link>https://jibinghu.github.io/post/WebRTC%20-xiang-guan-xue-xi-%20%231.html</link><description>https://zhuanlan.zhihu.com/p/409462524 #音视频通信为什么要选择WebRTC？&#13;
。</description><guid isPermaLink="true">https://jibinghu.github.io/post/WebRTC%20-xiang-guan-xue-xi-%20%231.html</guid><pubDate>Wed, 20 Nov 2024 15:38:15 +0000</pubDate></item><item><title>FV3系列学习_#001  // DCU 开发文档</title><link>https://jibinghu.github.io/post/FV3-xi-lie-xue-xi-_%23001%20%20--%20DCU%20-kai-fa-wen-dang.html</link><description>---&#13;
&#13;
FV3 源码：&#13;
&#13;
编译流程：&#13;
&#13;
0. module 检测可用包&#13;
&#13;
``` bash&#13;
module avail&#13;
module list&#13;
#  需要 intel 编译器&#13;
module unload mpi/hpcx/2.12.0/gcc-8.3.1&#13;
module load compiler/intel/2021.3.0&#13;
module load mpi/intelmpi/2021.3.0&#13;
```&#13;
&gt; 在 Makefile 里已经行首部署了 export ：&#13;
&#13;
``` bash&#13;
CC = icc&#13;
MPICC = mpiicc&#13;
```&#13;
&#13;
2. 编译时环境变量设置：&#13;
&#13;
``` bash&#13;
export I_MPI_F90=ifort&#13;
export I_MPI_CC=icc&#13;
export I_MPI_CXX=icc&#13;
```&#13;
&#13;
3. 根据`ics_231207_checked/exp/exec.amd64` 目录下的 Makefile 文件进行项目构建&#13;
    1. 注意替换目录和相关依赖，可以在vim中使用`:%s/\/public\/home\/lihuiyuan\/fv3\//\/home\/myuser\/myproject\//g`批量替换&#13;
    2. 注意对intel编译器进行module load&#13;
&#13;
4. 运行时命令：&#13;
&#13;
```&#13;
# 动态库路径&#13;
export LD_LIBRARY_PATH=/public/software/mathlib/netcdf/intel/4.7.4/lib/:$LD_LIBRARY_PATH&#13;
export LD_LIBRARY_PATH=/opt/hpc/software/compiler/intel/intel-compiler-2021.3.0/compiler/lib/intel64:$LD_LIBRARY_PATH&#13;
&#13;
# Fabric 和 MPI 配置&#13;
export FI_PROVIDER=verbs&#13;
export FI_MLX_IFACE=mlx5_0&#13;
export I_MPI_FABRICS=shm:ofi&#13;
export I_MPI_DEBUG=5&#13;
export FI_PSM3_DISABLE=1&#13;
ulimit -s unlimited&#13;
&#13;
```&#13;
&#13;
---&#13;
&#13;
## BUG &amp;&amp; FAQ：&#13;
&#13;
1. 编译阶段 DEBUG&#13;
&gt; 在 Fortran 文件 mpp_io.F90 的第 335 行，编译器尝试寻找一个名为 **netcdf.inc** 的包含文件，但未能找到。</description><guid isPermaLink="true">https://jibinghu.github.io/post/FV3-xi-lie-xue-xi-_%23001%20%20--%20DCU%20-kai-fa-wen-dang.html</guid><pubDate>Wed, 20 Nov 2024 14:29:24 +0000</pubDate></item><item><title>make -p 安全创建目录</title><link>https://jibinghu.github.io/post/make%20-p%20-an-quan-chuang-jian-mu-lu.html</link><description>mkdir -p 是 Linux 和类 Unix 系统中用于创建目录的命令，具体解释如下：&#13;
&#13;
命令语法&#13;
&#13;
mkdir -p [路径/目录名称]&#13;
&#13;
参数解释&#13;
&#13;
	•	mkdir：用于创建一个或多个目录。</description><guid isPermaLink="true">https://jibinghu.github.io/post/make%20-p%20-an-quan-chuang-jian-mu-lu.html</guid><pubDate>Tue, 19 Nov 2024 14:02:29 +0000</pubDate></item><item><title>Linux 解压 .tar.gz 文件</title><link>https://jibinghu.github.io/post/Linux%20-jie-ya-%20.tar.gz%20-wen-jian.html</link><description>可以使用 tar 命令将 .tar.gz 文件解压到指定的文件夹。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Linux%20-jie-ya-%20.tar.gz%20-wen-jian.html</guid><pubDate>Tue, 19 Nov 2024 13:58:50 +0000</pubDate></item><item><title>FV3（Finite-Volume Cubed-Sphere）相关 doc.</title><link>https://jibinghu.github.io/post/FV3%EF%BC%88Finite-Volume%20Cubed-Sphere%EF%BC%89-xiang-guan-%20doc..html</link><description>FV3（Finite-Volume Cubed-Sphere）是美国国家海洋和大气管理局（NOAA）地球流体动力学实验室（GFDL）开发的下一代全球预报系统的动力核心模型。</description><guid isPermaLink="true">https://jibinghu.github.io/post/FV3%EF%BC%88Finite-Volume%20Cubed-Sphere%EF%BC%89-xiang-guan-%20doc..html</guid><pubDate>Tue, 19 Nov 2024 09:37:49 +0000</pubDate></item><item><title>恒星内部的核聚变</title><link>https://jibinghu.github.io/post/heng-xing-nei-bu-de-he-ju-bian.html</link><description>恒星核心中主要发生的是**核聚变反应**（nuclear fusion）。</description><guid isPermaLink="true">https://jibinghu.github.io/post/heng-xing-nei-bu-de-he-ju-bian.html</guid><pubDate>Tue, 19 Nov 2024 08:06:48 +0000</pubDate></item><item><title>inter 开头的英语单词辨析</title><link>https://jibinghu.github.io/post/inter%20-kai-tou-de-ying-yu-dan-ci-bian-xi.html</link><description>### 常见以 'inter-' 为前缀的单词&#13;
1. Interaction：互动，交互。</description><guid isPermaLink="true">https://jibinghu.github.io/post/inter%20-kai-tou-de-ying-yu-dan-ci-bian-xi.html</guid><pubDate>Mon, 18 Nov 2024 08:23:41 +0000</pubDate></item><item><title>vim 中的快捷指令</title><link>https://jibinghu.github.io/post/vim%20-zhong-de-kuai-jie-zhi-ling.html</link><description>### 基本导航&#13;
1. 上下左右移动：&#13;
   - `h`：左移一个字符&#13;
   - `l`：右移一个字符&#13;
   - `j`：下移一行&#13;
   - `k`：上移一行&#13;
&#13;
2. 单词间移动：&#13;
   - `w`：跳到下一个单词的开头&#13;
   - `e`：跳到当前或下一个单词的末尾&#13;
   - `b`：跳到当前或上一个单词的开头&#13;
   - `ge`：跳到当前或上一个单词的末尾&#13;
&#13;
3. 行内移动：&#13;
   - `0`：移动到行首&#13;
   - `^`：移动到本行第一个非空白字符&#13;
   - `$`：移动到行尾&#13;
&#13;
---&#13;
&#13;
### 翻页&#13;
1. 上下翻页：&#13;
   - `Ctrl-d`：向下滚动半屏&#13;
   - `Ctrl-u`：向上滚动半屏&#13;
   - `Ctrl-f`：向下翻一屏&#13;
   - `Ctrl-b`：向上翻一屏&#13;
   - `zz`：将当前行滚动到屏幕中间&#13;
   - `zt`：将当前行滚动到屏幕顶部&#13;
   - `zb`：将当前行滚动到屏幕底部&#13;
&#13;
---&#13;
&#13;
### 特定跳转&#13;
1. 跳到指定行：&#13;
   - `gg`：跳到文件开头&#13;
   - `G`：跳到文件末尾&#13;
   - `nG`：跳到第 n 行（例如 `5G` 跳到第 5 行）&#13;
   - `H`：跳到屏幕顶部&#13;
   - `M`：跳到屏幕中间&#13;
   - `L`：跳到屏幕底部&#13;
&#13;
2. 匹配括号：&#13;
   - `%`：在括号、引号之间跳转（适用于 `()`、`[]`、`{}` 等）&#13;
&#13;
---&#13;
&#13;
### 搜索与跳转&#13;
1. 搜索：&#13;
   - `/pattern`：向下搜索 `pattern`&#13;
   - `?pattern`：向上搜索 `pattern`&#13;
   - `n`：重复上一次的搜索（同方向）&#13;
   - `N`：重复上一次的搜索（反方向）&#13;
&#13;
2. 跳转到某字符：&#13;
   - `fx`：向右跳到字符 `x`&#13;
   - `Fx`：向左跳到字符 `x`&#13;
   - `tx`：向右跳到字符 `x` 前&#13;
   - `Tx`：向左跳到字符 `x` 后&#13;
   - `;`：重复上一次字符跳转&#13;
   - `,`：反向重复上一次字符跳转&#13;
&#13;
---&#13;
&#13;
### 标记与跳转&#13;
1. 标记位置：&#13;
   - `m{a-z}`：设置标记（如 `ma`）&#13;
   - `'a`：跳到标记 `a` 的行首&#13;
   - `` `a ``：跳到标记 `a` 的确切位置&#13;
&#13;
2. 快速跳转：&#13;
   - `''`：跳回上一次光标所在的行首&#13;
   - `` `` ``：跳回上一次光标所在的确切位置&#13;
&#13;
---&#13;
&#13;
### 屏幕调整&#13;
1. 窗口滚动：&#13;
   - `Ctrl-e`：向下滚动一行&#13;
   - `Ctrl-y`：向上滚动一行&#13;
   - `Ctrl-l`：刷新屏幕（清除屏幕上的控制字符）&#13;
&#13;
2. 调整光标位置：&#13;
   - `zz`：将光标所在行置于屏幕中间&#13;
   - `zt`：将光标所在行置于屏幕顶部&#13;
   - `zb`：将光标所在行置于屏幕底部&#13;
&#13;
---&#13;
&#13;
### 其他常用快捷键&#13;
1. 撤销与恢复：&#13;
   - `u`：撤销最近一次操作&#13;
   - `Ctrl-r`：恢复撤销的操作&#13;
&#13;
2. 剪切、复制与粘贴：&#13;
   - `dd`：剪切当前行&#13;
   - `yy`：复制当前行&#13;
   - `p`：粘贴到光标后&#13;
   - `P`：粘贴到光标前&#13;
&#13;
3. 退出：&#13;
   - `:wq`：保存并退出&#13;
   - `:q!`：不保存退出&#13;
   - `:qa!`：强制退出所有文件&#13;
&#13;
---&#13;
&#13;
### 小技巧&#13;
- 结合数字：大部分命令可以加数字重复执行。</description><guid isPermaLink="true">https://jibinghu.github.io/post/vim%20-zhong-de-kuai-jie-zhi-ling.html</guid><pubDate>Mon, 18 Nov 2024 04:05:01 +0000</pubDate></item><item><title>WebRTC Intro.</title><link>https://jibinghu.github.io/post/WebRTC%20Intro..html</link><description>WebRTC（Web Real-Time Communication）是一种开源技术，支持在浏览器和移动应用之间进行实时的点对点（P2P）通信，无需额外的插件或外部应用支持。</description><guid isPermaLink="true">https://jibinghu.github.io/post/WebRTC%20Intro..html</guid><pubDate>Fri, 15 Nov 2024 03:49:15 +0000</pubDate></item><item><title>NVIDIA_CUTE</title><link>https://jibinghu.github.io/post/NVIDIA_CUTE.html</link><description>NVIDIA 的 CUTE（CUDA Templates for Efficient computation） 是一种高效的模板化编程框架，旨在帮助开发者更轻松地构建和优化 CUDA 内核。</description><guid isPermaLink="true">https://jibinghu.github.io/post/NVIDIA_CUTE.html</guid><pubDate>Thu, 14 Nov 2024 15:14:31 +0000</pubDate></item><item><title>python装饰器</title><link>https://jibinghu.github.io/post/python-zhuang-shi-qi.html</link><description>在 Python 中，@ 语法通常用于 装饰器（decorator）。</description><guid isPermaLink="true">https://jibinghu.github.io/post/python-zhuang-shi-qi.html</guid><pubDate>Thu, 14 Nov 2024 14:11:00 +0000</pubDate></item><item><title>RAG/AGENT框架</title><link>https://jibinghu.github.io/post/RAG-AGENT-kuang-jia.html</link><description>在人工智能领域，**RAG（Retrieval-Augmented Generation，检索增强生成）和Agent（智能体）**框架正迅速发展。</description><guid isPermaLink="true">https://jibinghu.github.io/post/RAG-AGENT-kuang-jia.html</guid><pubDate>Thu, 14 Nov 2024 11:41:26 +0000</pubDate></item><item><title>论文学习_CODET: CODE GENERATION WITH GENERATED TESTS</title><link>https://jibinghu.github.io/post/lun-wen-xue-xi-_CODET-%20CODE%20GENERATION%20WITH%20GENERATED%20TESTS.html</link><description>&gt; GPT-4o生成：https://arxiv.org/pdf/2207.10397，给我更多关于这篇论文的要点和创新点、应用场景以及技术原理，详细&#13;
&#13;
《CodeT: Code Generation with Generated Tests》是一篇由微软研究团队于2022年7月发表的论文，旨在提升代码生成模型的性能。</description><guid isPermaLink="true">https://jibinghu.github.io/post/lun-wen-xue-xi-_CODET-%20CODE%20GENERATION%20WITH%20GENERATED%20TESTS.html</guid><pubDate>Thu, 14 Nov 2024 10:39:54 +0000</pubDate></item><item><title>NAT（网络地址转换）方式启动容器</title><link>https://jibinghu.github.io/post/NAT%EF%BC%88-wang-luo-di-zhi-zhuan-huan-%EF%BC%89-fang-shi-qi-dong-rong-qi.html</link><description>以 NAT（网络地址转换）方式启动容器，通常指的是容器通过 Docker 的默认网络模式 bridge（桥接）模式 来访问外部网络。</description><guid isPermaLink="true">https://jibinghu.github.io/post/NAT%EF%BC%88-wang-luo-di-zhi-zhuan-huan-%EF%BC%89-fang-shi-qi-dong-rong-qi.html</guid><pubDate>Wed, 13 Nov 2024 04:43:39 +0000</pubDate></item><item><title>WebSocket 学习</title><link>https://jibinghu.github.io/post/WebSocket%20-xue-xi.html</link><description># 什么是 WebSocket？&#13;
&#13;
WebSocket 是一种 **全双工通信协议**，用于在客户端（如浏览器）和服务器之间建立持久连接。</description><guid isPermaLink="true">https://jibinghu.github.io/post/WebSocket%20-xue-xi.html</guid><pubDate>Wed, 13 Nov 2024 04:36:35 +0000</pubDate></item><item><title>查看Linux系统详细版本信息</title><link>https://jibinghu.github.io/post/cha-kan-Linux-xi-tong-xiang-xi-ban-ben-xin-xi.html</link><description>`cat /etc/os-release`&#13;
&#13;
``` bash&#13;
PRETTY_NAME='Ubuntu 22.04.4 LTS'&#13;
NAME='Ubuntu'&#13;
VERSION_ID='22.04'&#13;
VERSION='22.04.4 LTS (Jammy Jellyfish)'&#13;
VERSION_CODENAME=jammy&#13;
ID=ubuntu&#13;
ID_LIKE=debian&#13;
HOME_URL='https://www.ubuntu.com/'&#13;
SUPPORT_URL='https://help.ubuntu.com/'&#13;
BUG_REPORT_URL='https://bugs.launchpad.net/ubuntu/'&#13;
PRIVACY_POLICY_URL='https://www.ubuntu.com/legal/terms-and-policies/privacy-policy'&#13;
UBUNTU_CODENAME=jammy&#13;
wanren@wanren4090:~/tmp_f&#13;
```。</description><guid isPermaLink="true">https://jibinghu.github.io/post/cha-kan-Linux-xi-tong-xiang-xi-ban-ben-xin-xi.html</guid><pubDate>Wed, 13 Nov 2024 04:12:49 +0000</pubDate></item><item><title>查看指定分区硬盘命令</title><link>https://jibinghu.github.io/post/cha-kan-zhi-ding-fen-qu-ying-pan-ming-ling.html</link><description>`df -h /home`&#13;
``` bash&#13;
Filesystem                         Size  Used Avail Use% Mounted on&#13;
/dev/mapper/ubuntu--vg-ubuntu--lv  914G  629G  247G  72% /&#13;
```&#13;
&#13;
---&#13;
&#13;
du 和 df 是两种常用的 Linux 命令，虽然都用于查看存储空间的使用情况，但它们的作用和工作方式有很大的区别：&#13;
&#13;
1. du 命令&#13;
&#13;
	•	全称： Disk Usage（磁盘使用情况）。</description><guid isPermaLink="true">https://jibinghu.github.io/post/cha-kan-zhi-ding-fen-qu-ying-pan-ming-ling.html</guid><pubDate>Wed, 13 Nov 2024 04:09:02 +0000</pubDate></item><item><title>unimrcp 项目架构</title><link>https://jibinghu.github.io/post/unimrcp%20-xiang-mu-jia-gou.html</link><description>UniMRCP 是一个开源项目，旨在跨平台实现媒体资源控制协议（MRCP），符合 IETF 的 RFC6787（MRCPv2）和 RFC4463（MRCPv1）规范。</description><guid isPermaLink="true">https://jibinghu.github.io/post/unimrcp%20-xiang-mu-jia-gou.html</guid><pubDate>Wed, 13 Nov 2024 02:27:02 +0000</pubDate></item><item><title>论文阅读_SageAttention: Accurate 8-Bit Attention for Plug-and-play Inference Acceleration</title><link>https://jibinghu.github.io/post/lun-wen-yue-du-_SageAttention-%20Accurate%208-Bit%20Attention%20for%20Plug-and-play%20Inference%20Acceleration.html</link><description>论文《SageAttention: Accurate 8-Bit Attention for Plug-and-play Inference Acceleration》探讨了在深度学习模型中，尤其是Transformer架构中，注意力机制的计算复杂度问题。</description><guid isPermaLink="true">https://jibinghu.github.io/post/lun-wen-yue-du-_SageAttention-%20Accurate%208-Bit%20Attention%20for%20Plug-and-play%20Inference%20Acceleration.html</guid><pubDate>Tue, 12 Nov 2024 14:25:48 +0000</pubDate></item><item><title>论文阅读_MFFT: A GPU Accelerated Highly Efficient Mixed-Precision Large-Scale FFT Framework</title><link>https://jibinghu.github.io/post/lun-wen-yue-du-_MFFT-%20A%20GPU%20Accelerated%20Highly%20Efficient%20Mixed-Precision%20Large-Scale%20FFT%20Framework.html</link><description>论文地址：https://dl.acm.org/doi/10.1145/3605148&#13;
&#13;
---&#13;
&#13;
GPT-4o 总结：&#13;
&#13;
&gt; https://dl.acm.org/doi/10.1145/3605148&#13;
&#13;
&gt; 分点详细总结这篇问题的场景、作用和创新点&#13;
&#13;
该论文针对在GPU集群上执行大规模快速傅里叶变换（FFT）时的性能瓶颈，提出了一种名为MFFT的高效混合精度FFT框架。</description><guid isPermaLink="true">https://jibinghu.github.io/post/lun-wen-yue-du-_MFFT-%20A%20GPU%20Accelerated%20Highly%20Efficient%20Mixed-Precision%20Large-Scale%20FFT%20Framework.html</guid><pubDate>Tue, 12 Nov 2024 14:10:47 +0000</pubDate></item><item><title>论文阅读_A novel HPL-AI approach for FP16-only accelerator and its instantiation on Kunpeng+Ascend AI-specific platform</title><link>https://jibinghu.github.io/post/lun-wen-yue-du-_A%20novel%20HPL-AI%20approach%20for%20FP16-only%20accelerator%20and%20its%20instantiation%20on%20Kunpeng%2BAscend%20AI-specific%20platform.html</link><description>论文地址：https://dl.acm.org/doi/10.1016/j.jpdc.2024.104884&#13;
&#13;
---&#13;
&#13;
GPT-4o总结：&#13;
&#13;
&gt; https://dl.acm.org/doi/10.1016/j.jpdc.2024.104884&#13;
&gt; &#13;
&gt; 总结这篇问题的场景、作用和创新点&#13;
&#13;
根据您提供的DOI信息，论文标题为“针对仅支持FP16加速器的新型HPL-AI方法及其在Kunpeng+Ascend AI专用平台上的实现”。</description><guid isPermaLink="true">https://jibinghu.github.io/post/lun-wen-yue-du-_A%20novel%20HPL-AI%20approach%20for%20FP16-only%20accelerator%20and%20its%20instantiation%20on%20Kunpeng%2BAscend%20AI-specific%20platform.html</guid><pubDate>Tue, 12 Nov 2024 14:02:46 +0000</pubDate></item><item><title>MRCP/SIP/RTP协议</title><link>https://jibinghu.github.io/post/MRCP-SIP-RTP-xie-yi.html</link><description>### MRCP、SIP 和 RTP 是在现代通信系统中经常组合使用的三个协议，尤其在语音识别（ASR）、文本转语音（TTS）和呼叫中心等系统中。</description><guid isPermaLink="true">https://jibinghu.github.io/post/MRCP-SIP-RTP-xie-yi.html</guid><pubDate>Tue, 12 Nov 2024 10:36:03 +0000</pubDate></item><item><title>Linux 使用日常：find 重点标注</title><link>https://jibinghu.github.io/post/Linux%20-shi-yong-ri-chang-%EF%BC%9Afind%20-zhong-dian-biao-zhu.html</link><description>查找特定文件/文件夹，筛选所选信息并将重点信息标红：&#13;
&#13;
`find / -name '* search_content*' 2&gt;/dev/null | grep --color=always 'search_content'`&#13;
&#13;
&#13;
`find / -name '*search_content*' -printf '\033[1;31m%p\033[0m\n' 2&gt;/dev/null`&#13;
&#13;
这里将 find 的输出高亮设置为红色 (\033[1;31m)，可以根据需要修改颜色。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Linux%20-shi-yong-ri-chang-%EF%BC%9Afind%20-zhong-dian-biao-zhu.html</guid><pubDate>Tue, 12 Nov 2024 08:59:26 +0000</pubDate></item><item><title>面试回顾 -&gt; RAG中搜索效果不好如何解决</title><link>https://jibinghu.github.io/post/mian-shi-hui-gu-%20--%20RAG-zhong-sou-suo-xiao-guo-bu-hao-ru-he-jie-jue.html</link><description>如果通过 RAG（Retrieval-Augmented Generation）检索出来的内容效果不理想，可以尝试以下改进措施：&#13;
&#13;
1. 改进检索库质量&#13;
&#13;
- 提升文档质量：确保用于检索的文档准确、相关、清晰，剔除低质量、不相关的文档。</description><guid isPermaLink="true">https://jibinghu.github.io/post/mian-shi-hui-gu-%20--%20RAG-zhong-sou-suo-xiao-guo-bu-hao-ru-he-jie-jue.html</guid><pubDate>Fri, 08 Nov 2024 07:25:54 +0000</pubDate></item><item><title>面试回顾 -&gt; C++中怎样判断两个浮点数相等</title><link>https://jibinghu.github.io/post/mian-shi-hui-gu-%20--%20C%2B%2B-zhong-zen-yang-pan-duan-liang-ge-fu-dian-shu-xiang-deng.html</link><description>### C++中怎样判断两个浮点数相等&#13;
&#13;
在 C++ 中，判断两个浮点数是否相等时，由于浮点数在存储中的精度问题，直接比较可能会导致不准确的结果。</description><guid isPermaLink="true">https://jibinghu.github.io/post/mian-shi-hui-gu-%20--%20C%2B%2B-zhong-zen-yang-pan-duan-liang-ge-fu-dian-shu-xiang-deng.html</guid><pubDate>Fri, 08 Nov 2024 07:24:12 +0000</pubDate></item><item><title>C++ 中的实例化回顾</title><link>https://jibinghu.github.io/post/C%2B%2B%20-zhong-de-shi-li-hua-hui-gu.html</link><description>### 普通实例化&#13;
&#13;
在 C++ 中，struct 和 class 在实例化时的语法是相同的。</description><guid isPermaLink="true">https://jibinghu.github.io/post/C%2B%2B%20-zhong-de-shi-li-hua-hui-gu.html</guid><pubDate>Fri, 08 Nov 2024 06:47:08 +0000</pubDate></item><item><title>Github 推送错误解决</title><link>https://jibinghu.github.io/post/Github%20-tui-song-cuo-wu-jie-jue.html</link><description>在正常使用 `git push origin` 向 repo 推送时发现报错如下：&#13;
&#13;
``` bash&#13;
[main da5bafe] 11/8/01&#13;
 3 files changed, 55 insertions(+)&#13;
 create mode 100644 cpp_prac/Cpython_bind/Cpython.cpp&#13;
 create mode 100644 cpp_prac/Cpython_bind/Cpython.py&#13;
 create mode 100755 cpp_prac/Cpython_bind/demo_module.so&#13;
(py310) binghu@iscashpc:~/leetcode$ git push origin&#13;
Missing or invalid credentials.&#13;
Error: connect ECONNREFUSED /run/user/1006/vscode-git-8f5a0a4c40.sock&#13;
    at PipeConnectWrap.afterConnect [as oncomplete] (node:net:1607:16) {&#13;
  errno: -111,&#13;
  code: 'ECONNREFUSED',&#13;
  syscall: 'connect',&#13;
  address: '/run/user/1006/vscode-git-8f5a0a4c40.sock'&#13;
}&#13;
Missing or invalid credentials.&#13;
Error: connect ECONNREFUSED /run/user/1006/vscode-git-8f5a0a4c40.sock&#13;
    at PipeConnectWrap.afterConnect [as oncomplete] (node:net:1607:16) {&#13;
  errno: -111,&#13;
  code: 'ECONNREFUSED',&#13;
  syscall: 'connect',&#13;
  address: '/run/user/1006/vscode-git-8f5a0a4c40.sock'&#13;
}&#13;
remote: No anonymous write access.&#13;
fatal: Authentication failed for 'https://github.com/jibinghu/leetcode/'&#13;
```&#13;
&#13;
显然是身份验证不通过，但使用 `ssh -T git@github.com` remote github时返回：&#13;
&#13;
`Hi jibinghu! You've successfully authenticated, but GitHub does not provide shell access.`&#13;
&#13;
说明密钥是正确的，`git remote -v` 检查：&#13;
&#13;
``` bash&#13;
origin  https://github.com/jibinghu/leetcode (fetch)&#13;
origin  https://github.com/jibinghu/leetcode (push)&#13;
```&#13;
&#13;
&gt; 身份验证已经通过。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Github%20-tui-song-cuo-wu-jie-jue.html</guid><pubDate>Fri, 08 Nov 2024 04:27:54 +0000</pubDate></item><item><title>C程序通过 CPython 绑定</title><link>https://jibinghu.github.io/post/C-cheng-xu-tong-guo-%20CPython%20-bang-ding.html</link><description>在 Python 中使用 C++ 实现代码并将其注册为 Python 可调用的扩展模块，可以通过 CPython（Python 的 C API 实现）来实现。</description><guid isPermaLink="true">https://jibinghu.github.io/post/C-cheng-xu-tong-guo-%20CPython%20-bang-ding.html</guid><pubDate>Thu, 07 Nov 2024 14:35:58 +0000</pubDate></item><item><title>搜广推算法总结</title><link>https://jibinghu.github.io/post/sou-guang-tui-suan-fa-zong-jie.html</link><description>搜广推（搜索、广告、推荐）领域是互联网和计算领域的重要组成部分，涉及多种算法来提高用户体验和商业效益。</description><guid isPermaLink="true">https://jibinghu.github.io/post/sou-guang-tui-suan-fa-zong-jie.html</guid><pubDate>Thu, 07 Nov 2024 07:57:14 +0000</pubDate></item><item><title>3A-NPC行为逻辑</title><link>https://jibinghu.github.io/post/3A-NPC-xing-wei-luo-ji.html</link><description>在类似《只狼》这样的3A游戏中，NPC（非玩家角色）的行为逻辑是由多层次的人工智能（AI）系统设计和实现的，旨在创造出令人信服且具有挑战性的游戏体验。</description><guid isPermaLink="true">https://jibinghu.github.io/post/3A-NPC-xing-wei-luo-ji.html</guid><pubDate>Thu, 07 Nov 2024 07:54:42 +0000</pubDate></item><item><title>FAQ in Transformer</title><link>https://jibinghu.github.io/post/FAQ%20in%20Transformer.html</link><description>### 如何理解 Transformers 中 FFNs 的作用？&#13;
&#13;
- attention会混合多个token的信息来提取特征，但每个channel（feature dimension）保持独立。</description><guid isPermaLink="true">https://jibinghu.github.io/post/FAQ%20in%20Transformer.html</guid><pubDate>Thu, 07 Nov 2024 07:31:02 +0000</pubDate></item><item><title>推荐算法简介</title><link>https://jibinghu.github.io/post/tui-jian-suan-fa-jian-jie.html</link><description>推荐算法领域的研究内容广泛，涉及机器学习、深度学习、信息检索、数据挖掘等多个方向。</description><guid isPermaLink="true">https://jibinghu.github.io/post/tui-jian-suan-fa-jian-jie.html</guid><pubDate>Wed, 06 Nov 2024 09:31:15 +0000</pubDate></item><item><title>计算机体系结构、并行与分布计算、存储系统领域的国际学术期刊和会议列表</title><link>https://jibinghu.github.io/post/ji-suan-ji-ti-xi-jie-gou-%E3%80%81-bing-xing-yu-fen-bu-ji-suan-%E3%80%81-cun-chu-xi-tong-ling-yu-de-guo-ji-xue-shu-qi-kan-he-hui-yi-lie-biao.html</link><description>### 中国计算机学会（CCF）推荐的计算机体系结构、并行与分布计算、存储系统领域的国际学术期刊和会议列表&#13;
&#13;
---&#13;
&#13;
#### A类期刊：&#13;
&#13;
- **ACM Transactions on Computer Systems (TOCS)**  &#13;
  出版社：ACM  &#13;
  简介：研究计算机系统的设计、实现和分析，重点关注系统的结构、性能和可靠性。</description><guid isPermaLink="true">https://jibinghu.github.io/post/ji-suan-ji-ti-xi-jie-gou-%E3%80%81-bing-xing-yu-fen-bu-ji-suan-%E3%80%81-cun-chu-xi-tong-ling-yu-de-guo-ji-xue-shu-qi-kan-he-hui-yi-lie-biao.html</guid><pubDate>Tue, 05 Nov 2024 12:41:32 +0000</pubDate></item><item><title>CUDA Graph</title><link>https://jibinghu.github.io/post/CUDA%20Graph.html</link><description>使用 CUDA 图（CUDA Graph）来加速向量加法操作的示例。</description><guid isPermaLink="true">https://jibinghu.github.io/post/CUDA%20Graph.html</guid><pubDate>Mon, 04 Nov 2024 14:25:09 +0000</pubDate></item><item><title>卷积核的通道数和个数与输入、输出的关系</title><link>https://jibinghu.github.io/post/juan-ji-he-de-tong-dao-shu-he-ge-shu-yu-shu-ru-%E3%80%81-shu-chu-de-guan-xi.html</link><description>在卷积操作中，卷积核的通道数和个数与输入、输出的关系如下：&#13;
&#13;
	1.	卷积核的通道数：&#13;
	•	卷积核的通道数必须与输入特征图的通道数相同。</description><guid isPermaLink="true">https://jibinghu.github.io/post/juan-ji-he-de-tong-dao-shu-he-ge-shu-yu-shu-ru-%E3%80%81-shu-chu-de-guan-xi.html</guid><pubDate>Mon, 04 Nov 2024 06:41:07 +0000</pubDate></item><item><title>ollama 源码编译相关</title><link>https://jibinghu.github.io/post/ollama%20-yuan-ma-bian-yi-xiang-guan.html</link><description>编译指南：https://blog.csdn.net/skywalk8163/article/details/140390925。</description><guid isPermaLink="true">https://jibinghu.github.io/post/ollama%20-yuan-ma-bian-yi-xiang-guan.html</guid><pubDate>Mon, 04 Nov 2024 05:18:25 +0000</pubDate></item><item><title>终端可以连接 SSH Remote ，但 VSCode 一直卡在初始化下载</title><link>https://jibinghu.github.io/post/zhong-duan-ke-yi-lian-jie-%20SSH%20Remote%20%EF%BC%8C-dan-%20VSCode%20-yi-zhi-qia-zai-chu-shi-hua-xia-zai.html</link><description>其实观察log也可以看出来，如果不是 .vscode-serve 的问题的话，就是服务器空间不够了。</description><guid isPermaLink="true">https://jibinghu.github.io/post/zhong-duan-ke-yi-lian-jie-%20SSH%20Remote%20%EF%BC%8C-dan-%20VSCode%20-yi-zhi-qia-zai-chu-shi-hua-xia-zai.html</guid><pubDate>Mon, 04 Nov 2024 04:44:02 +0000</pubDate></item><item><title>Python 双端队列</title><link>https://jibinghu.github.io/post/Python%20-shuang-duan-dui-lie.html</link><description>from collections import deque 是用于导入 Python 标准库 collections 中的 deque（双端队列）的语句。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Python%20-shuang-duan-dui-lie.html</guid><pubDate>Sun, 03 Nov 2024 14:39:21 +0000</pubDate></item><item><title>STL -&gt; vector 方法记录</title><link>https://jibinghu.github.io/post/STL%20--%20vector%20-fang-fa-ji-lu.html</link><description>std::vector 提供了许多有用的成员函数，可以方便地操作和访问元素。</description><guid isPermaLink="true">https://jibinghu.github.io/post/STL%20--%20vector%20-fang-fa-ji-lu.html</guid><pubDate>Sun, 03 Nov 2024 09:01:19 +0000</pubDate></item><item><title>拓扑排序</title><link>https://jibinghu.github.io/post/tuo-pu-pai-xu.html</link><description>以下是一个简单的 C++ 程序，用于构建一个有向无环图（DAG）的拓扑结构，并验证是否可以正确进行拓扑排序。</description><guid isPermaLink="true">https://jibinghu.github.io/post/tuo-pu-pai-xu.html</guid><pubDate>Sun, 03 Nov 2024 07:02:34 +0000</pubDate></item><item><title>关于前/中/后缀表示式的概念/算法实现</title><link>https://jibinghu.github.io/post/guan-yu-qian---zhong---hou-zhui-biao-shi-shi-de-gai-nian---suan-fa-shi-xian.html</link><description>前缀表达式、中缀表达式和后缀表达式是三种不同的算术表达式表示方式，它们主要区别在于运算符相对于操作数的位置。</description><guid isPermaLink="true">https://jibinghu.github.io/post/guan-yu-qian---zhong---hou-zhui-biao-shi-shi-de-gai-nian---suan-fa-shi-xian.html</guid><pubDate>Fri, 01 Nov 2024 07:08:08 +0000</pubDate></item><item><title>重新激活ollama配置</title><link>https://jibinghu.github.io/post/zhong-xin-ji-huo-ollama-pei-zhi.html</link><description>在配置完 /etc/systemd/system/ollama.service 文件后，可以通过以下步骤激活并启动该服务：&#13;
&#13;
1. 重新加载 systemd 配置&#13;
&#13;
首先，需要重新加载 systemd 的配置，以便 systemd 识别新的服务文件：&#13;
&#13;
sudo systemctl daemon-reload&#13;
&#13;
2. 启动服务&#13;
&#13;
重新加载配置后，可以使用以下命令启动 ollama 服务：&#13;
&#13;
sudo systemctl start ollama.service&#13;
&#13;
3. 设置开机自启动（可选）&#13;
&#13;
如果希望在系统启动时自动启动 ollama 服务，可以启用自启动：&#13;
&#13;
sudo systemctl enable ollama.service&#13;
&#13;
4. 检查服务状态&#13;
&#13;
可以使用以下命令检查服务是否启动成功：&#13;
&#13;
sudo systemctl status ollama.service&#13;
&#13;
这将显示 ollama 服务的当前状态和日志。</description><guid isPermaLink="true">https://jibinghu.github.io/post/zhong-xin-ji-huo-ollama-pei-zhi.html</guid><pubDate>Fri, 01 Nov 2024 06:09:19 +0000</pubDate></item><item><title>检查程序运行时环境变量(以Ollama为例)</title><link>https://jibinghu.github.io/post/jian-cha-cheng-xu-yun-xing-shi-huan-jing-bian-liang-%28-yi-Ollama-wei-li-%29.html</link><description>这个命令用于查看进程ID为 4368 的进程中，所有与 OLLAMA_ 相关的环境变量及其值。</description><guid isPermaLink="true">https://jibinghu.github.io/post/jian-cha-cheng-xu-yun-xing-shi-huan-jing-bian-liang-%28-yi-Ollama-wei-li-%29.html</guid><pubDate>Fri, 01 Nov 2024 06:01:46 +0000</pubDate></item><item><title>scaled_dot_product_attention</title><link>https://jibinghu.github.io/post/scaled_dot_product_attention.html</link><description># scaled_dot_product_attention&#13;
torch 中的 scaled_dot_product_attention 是 PyTorch 2.0 中引入的最优 Attention 接口之一，旨在通过硬件加速和优化的计算图，加速模型训练与推理。</description><guid isPermaLink="true">https://jibinghu.github.io/post/scaled_dot_product_attention.html</guid><pubDate>Thu, 31 Oct 2024 13:15:14 +0000</pubDate></item><item><title>Lambda函数</title><link>https://jibinghu.github.io/post/Lambda-han-shu.html</link><description>Lambda函数是C++11引入的一种简洁的匿名函数，用于临时定义一次性的小函数。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Lambda-han-shu.html</guid><pubDate>Thu, 31 Oct 2024 06:44:31 +0000</pubDate></item><item><title>ConvStencil: Transform Stencil Computation to Matrix Multiplication on Tensor Cores</title><link>https://jibinghu.github.io/post/ConvStencil-%20Transform%20Stencil%20Computation%20to%20Matrix%20Multiplication%20on%20Tensor%20Cores.html</link><description>ConvStencil: Transform Stencil Computation to Matrix Multiplication on Tensor Cores&#13;
&#13;
链接：https://dl.acm.org/doi/pdf/10.1145/3627535.3638476&#13;
引用：Yuetao Chen, Kun Li, Yuhao Wang, Donglin Bai, Lei Wang, Lingxiao Ma, Liang Yuan, Yunquan Zhang, Ting Cao, and Mao Yang. 2024. ConvStencil: Transform Stencil Computation to Matrix Multiplication on Tensor Cores. In Proceedings of the 29th ACM SIGPLAN Annual Symposium on Principles and Practice of Parallel Programming (PPoPP '24). Association for Computing Machinery, New York, NY, USA, 333–347. https://doi.org/10.1145/3627535.3638476&#13;
&#13;
---&#13;
&#13;
不要钻牛角尖，细节的东西暂时不需要花大把时间去考虑。</description><guid isPermaLink="true">https://jibinghu.github.io/post/ConvStencil-%20Transform%20Stencil%20Computation%20to%20Matrix%20Multiplication%20on%20Tensor%20Cores.html</guid><pubDate>Mon, 21 Oct 2024 14:50:32 +0000</pubDate></item><item><title>分组卷积</title><link>https://jibinghu.github.io/post/fen-zu-juan-ji.html</link><description>&lt;a href='https://paddlepedia.readthedocs.io/en/latest/tutorials/CNN/convolution_operator/Group_Convolution.html'&gt;PaddlePaddle深度学习知识&lt;/a&gt;&#13;
---&#13;
### 分组卷积&#13;
&#13;
对于尺寸为 𝐻1×𝑊1×𝐶1&#13;
 的输入矩阵，当标准卷积核的尺寸为 ℎ1×𝑤1×𝐶1&#13;
 ，共有 𝐶2&#13;
 个标准卷积核时，标准卷积会对完整的输入数据进行运算，最终得到的输出矩阵尺寸为 𝐻2×𝑊2×𝐶2&#13;
 。</description><guid isPermaLink="true">https://jibinghu.github.io/post/fen-zu-juan-ji.html</guid><pubDate>Mon, 21 Oct 2024 04:09:57 +0000</pubDate></item><item><title>C++智能指针</title><link>https://jibinghu.github.io/post/C%2B%2B-zhi-neng-zhi-zhen.html</link><description>智能指针是C++中的一种用于自动管理动态内存的指针，它们能够自动释放不再使用的对象，避免内存泄漏。</description><guid isPermaLink="true">https://jibinghu.github.io/post/C%2B%2B-zhi-neng-zhi-zhen.html</guid><pubDate>Thu, 17 Oct 2024 06:05:51 +0000</pubDate></item><item><title>每日翻译！</title><link>https://jibinghu.github.io/post/mei-ri-fan-yi-%EF%BC%81.html</link><description>文言文：&#13;
- 行当务之事，亦宜分神以探未来之道，扩展格局。</description><guid isPermaLink="true">https://jibinghu.github.io/post/mei-ri-fan-yi-%EF%BC%81.html</guid><pubDate>Tue, 15 Oct 2024 13:54:21 +0000</pubDate></item><item><title>Pooling 层 -&gt; TEST</title><link>https://jibinghu.github.io/post/Pooling%20-ceng-%20--%20TEST.html</link><description>基于 Torch 的脚本：&#13;
``` python&#13;
import torch&#13;
import torch.nn as nn&#13;
&#13;
# Create a sample tensor (2D)&#13;
input_tensor = torch.tensor([[1., 2., 3., 4.],&#13;
                             [5., 6., 7., 8.],&#13;
                             [9., 10., 11., 12.],&#13;
                             [13., 14., 15., 16.]])&#13;
&#13;
# Reshape the tensor to 1x1x4x4 (as expected by pooling layers for 2D input)&#13;
input_tensor = input_tensor.unsqueeze(0).unsqueeze(0)&#13;
&#13;
# Max Pooling with padding&#13;
max_pool = nn.MaxPool2d(kernel_size=2, stride=2, padding=0)&#13;
max_pooled_output = max_pool(input_tensor)&#13;
&#13;
# Average Pooling with padding&#13;
# avg_pool = nn.AvgPool2d(kernel_size=2, stride=2, padding=0)&#13;
# avg_pooled_output = avg_pool(input_tensor)&#13;
&#13;
print('Input Tensor:\n', input_tensor)&#13;
print('\nMax Pooled Output with Padding:\n', max_pooled_output)&#13;
print('\nAverage Pooled Output with Padding:\n', avg_pooled_output)&#13;
```&#13;
&#13;
---&#13;
&#13;
### 4 * 4 的 Pooling 层是比较典型的，所以进行多方面测试：&#13;
&#13;
- **kernel_size=2, stride=2, padding=0：**&#13;
``` bash&#13;
Max Pooled Output with Padding:&#13;
 tensor([[[[ 6.,  7.,  8.],&#13;
          [10., 11., 12.],&#13;
          [14., 15., 16.]]]])&#13;
```&#13;
这部分还是没有异议的，当Stride=1时从开头进行Pooling；&#13;
- **kernel_size=2, stride=2, padding=0：**&#13;
``` bash&#13;
 tensor([[[[ 6.,  8.],&#13;
          [14., 16.]]]])&#13;
```&#13;
当Stride足够覆盖一次时，也是没有异议的。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Pooling%20-ceng-%20--%20TEST.html</guid><pubDate>Tue, 15 Oct 2024 13:42:40 +0000</pubDate></item><item><title>每日翻译！</title><link>https://jibinghu.github.io/post/mei-ri-fan-yi-%EF%BC%81.html</link><description>文言文：&#13;
&#13;
持志如焚，持行如矢，志不改，行不止。</description><guid isPermaLink="true">https://jibinghu.github.io/post/mei-ri-fan-yi-%EF%BC%81.html</guid><pubDate>Mon, 14 Oct 2024 14:56:47 +0000</pubDate></item><item><title>C++设计模式之单例模式与工厂模式</title><link>https://jibinghu.github.io/post/C%2B%2B-she-ji-mo-shi-zhi-dan-li-mo-shi-yu-gong-chang-mo-shi.html</link><description>1. 单例模式（Singleton Pattern）&#13;
&#13;
单例模式是一种设计模式，保证在应用程序的生命周期内，一个类只有一个实例，并且提供一个全局访问点来获取这个实例。</description><guid isPermaLink="true">https://jibinghu.github.io/post/C%2B%2B-she-ji-mo-shi-zhi-dan-li-mo-shi-yu-gong-chang-mo-shi.html</guid><pubDate>Mon, 14 Oct 2024 07:42:14 +0000</pubDate></item><item><title>C++结构化绑定</title><link>https://jibinghu.github.io/post/C%2B%2B-jie-gou-hua-bang-ding.html</link><description>## C++ 17 结构化绑定&#13;
&#13;
stl 的 map 容器很多读者应该都很熟悉，map 容器提供了一个 **insert** 方法，我们用该方法向 map 中插入元素，但是应该很少有人记得 **insert** 方法的返回值是什么类型，让我们来看一下 C++98/03 提供的 **insert** 方法的签名：&#13;
&#13;
```&#13;
std::pair&lt;iterator,bool&gt; insert( const value_type&amp; value );&#13;
```&#13;
&#13;
这里我们仅关心其返回值，这个返回值是一个 **std::pair** 类型，由于 map 中的元素的 key 不允许重复，所以如果 insert 方法调用成功，T1 是被成功插入到 map 中的元素的迭代器，T2 的类型为 bool，此时其值为 true（表示插入成功）；如果 insert 由于 key 重复，T1 是造成 insert 插入失败、已经存在于 map 中的元素的迭代器，此时 T2 的值为 false（表示插入失败）。</description><guid isPermaLink="true">https://jibinghu.github.io/post/C%2B%2B-jie-gou-hua-bang-ding.html</guid><pubDate>Fri, 11 Oct 2024 05:24:46 +0000</pubDate></item><item><title>`GLIBCXX_3.4.32' not found" error at runtime. GCC 13.2.0 问题的解决方式：StackOverflow</title><link>https://jibinghu.github.io/post/%60GLIBCXX_3.4.32%27%20not%20found-%20error%20at%20runtime.%20GCC%2013.2.0%20-wen-ti-de-jie-jue-fang-shi-%EF%BC%9AStackOverflow.html</link><description>&gt; the /lib/x86_64-linux-gnu/libstdc++.so.6: version `GLIBCXX_3.4.32' is for gcc13, so we need to update this file.`&#13;
&#13;
0. 查看当前 GLIBCXX 版本&#13;
首先通过命令`strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX`&#13;
- strings：这是一个 Linux 命令，用于提取二进制文件或库文件中可打印的字符串。</description><guid isPermaLink="true">https://jibinghu.github.io/post/%60GLIBCXX_3.4.32%27%20not%20found-%20error%20at%20runtime.%20GCC%2013.2.0%20-wen-ti-de-jie-jue-fang-shi-%EF%BC%9AStackOverflow.html</guid><pubDate>Thu, 10 Oct 2024 13:27:18 +0000</pubDate></item><item><title>C++ 中常用的检查宏：CHECK系列 -&gt; 标准库/glog库 &lt;&lt; 单元测试；std::function </title><link>https://jibinghu.github.io/post/C%2B%2B%20-zhong-chang-yong-de-jian-cha-hong-%EF%BC%9ACHECK-xi-lie-%20--%20-biao-zhun-ku--glog-ku-%20--%20-dan-yuan-ce-shi-%EF%BC%9Bstd--function%20.html</link><description>在C++中，类似于`CHECK_LT`的断言方法通常用于验证条件，并在条件不满足时触发错误或异常。</description><guid isPermaLink="true">https://jibinghu.github.io/post/C%2B%2B%20-zhong-chang-yong-de-jian-cha-hong-%EF%BC%9ACHECK-xi-lie-%20--%20-biao-zhun-ku--glog-ku-%20--%20-dan-yuan-ce-shi-%EF%BC%9Bstd--function%20.html</guid><pubDate>Wed, 09 Oct 2024 08:06:20 +0000</pubDate></item><item><title>类模板的特化 #举例</title><link>https://jibinghu.github.io/post/lei-mo-ban-de-te-hua-%20%23-ju-li.html</link><description>### 例子：通用 `Array` 类和 `bool` 类型的特化&#13;
&#13;
创建一个通用的 `Array` 类模板，它可以存储任意类型的数据。</description><guid isPermaLink="true">https://jibinghu.github.io/post/lei-mo-ban-de-te-hua-%20%23-ju-li.html</guid><pubDate>Wed, 09 Oct 2024 03:38:54 +0000</pubDate></item><item><title>单目深度估计</title><link>https://jibinghu.github.io/post/dan-mu-shen-du-gu-ji.html</link><description>**单目深度估计**（Monocular Depth Estimation）是计算机视觉中的一个经典任务，目标是通过一张单目摄像头（即仅包含一个视角的二维图像）来估计场景中每个像素的深度信息。</description><guid isPermaLink="true">https://jibinghu.github.io/post/dan-mu-shen-du-gu-ji.html</guid><pubDate>Mon, 09 Sep 2024 07:37:00 +0000</pubDate></item><item><title>ONNX配置参数说明（v1）</title><link>https://jibinghu.github.io/post/ONNX-pei-zhi-can-shu-shuo-ming-%EF%BC%88v1%EF%BC%89.html</link><description>ONNX配置参数说明（v1）&#13;
&#13;
torch Version 2.1.0 的 export参数：&#13;
``` python&#13;
def export(&#13;
    model: Union[torch.nn.Module, torch.jit.ScriptModule, torch.jit.ScriptFunction],&#13;
    args: Union[Tuple[Any, ...], torch.Tensor],&#13;
    f: Union[str, io.BytesIO],&#13;
    export_params: bool = True,&#13;
    verbose: bool = False,&#13;
    training: _C_onnx.TrainingMode = _C_onnx.TrainingMode.EVAL,&#13;
    input_names: Optional[Sequence[str]] = None,&#13;
    output_names: Optional[Sequence[str]] = None,&#13;
    operator_export_type: _C_onnx.OperatorExportTypes = _C_onnx.OperatorExportTypes.ONNX,&#13;
    opset_version: Optional[int] = None,&#13;
    do_constant_folding: bool = True,&#13;
    dynamic_axes: Optional[&#13;
        Union[Mapping[str, Mapping[int, str]], Mapping[str, Sequence[int]]]&#13;
    ] = None,&#13;
    keep_initializers_as_inputs: Optional[bool] = None,&#13;
    custom_opsets: Optional[Mapping[str, int]] = None,&#13;
    export_modules_as_functions: Union[bool, Collection[Type[torch.nn.Module]]] = False,&#13;
    autograd_inlining: Optional[bool] = True,&#13;
)&#13;
```&#13;
&#13;
model: pytorch模型&#13;
args: 第一个参数model的输入数据，因为模型的输入可能不止一个，因此采用元组作为参数&#13;
export_params: 导出的onnx模型文件可以包含网络结构与权重参数，如果设置该参数为False，则导出的onnx模型文件只包含网络结构，因此，一般保持默认为True即可&#13;
verbose: 该参数如果指定为True，则在导出onnx的过程中会打印详细的导出过程信息&#13;
&#13;
opset_version: ONNX的算子集版本，默认为11。</description><guid isPermaLink="true">https://jibinghu.github.io/post/ONNX-pei-zhi-can-shu-shuo-ming-%EF%BC%88v1%EF%BC%89.html</guid><pubDate>Tue, 03 Sep 2024 13:54:39 +0000</pubDate></item><item><title>CUDA 编程模型中的 Block 的共享内存与 SM 的L1 Cache和Shared Memory</title><link>https://jibinghu.github.io/post/CUDA%20-bian-cheng-mo-xing-zhong-de-%20Block%20-de-gong-xiang-nei-cun-yu-%20SM%20-de-L1%20Cache-he-Shared%20Memory.html</link><description>### CUDA 编程模型中的 Block 的共享内存与 SM 的L1 Cache和Shared Memory有什么区别和联系？&#13;
&#13;
在 CUDA 编程模型中，Block 的共享内存（Shared Memory）与 SM（Streaming Multiprocessor）的 L1 Cache 和 Shared Memory 是两个重要的内存层级，它们在用途、性能和实现上都有所不同。</description><guid isPermaLink="true">https://jibinghu.github.io/post/CUDA%20-bian-cheng-mo-xing-zhong-de-%20Block%20-de-gong-xiang-nei-cun-yu-%20SM%20-de-L1%20Cache-he-Shared%20Memory.html</guid><pubDate>Mon, 02 Sep 2024 06:06:48 +0000</pubDate></item><item><title>NV知识库(SASS和PTX中间代码)</title><link>https://jibinghu.github.io/post/NV-zhi-shi-ku-%28SASS-he-PTX-zhong-jian-dai-ma-%29.html</link><description>### SASS 和 PTX&#13;
&#13;
SASS(Streaming Assembler) 和 PTX(Parallel Thread Execution)都是 NVIDIA CUDA 编程模型中的组件，处于不同的抽象层次。</description><guid isPermaLink="true">https://jibinghu.github.io/post/NV-zhi-shi-ku-%28SASS-he-PTX-zhong-jian-dai-ma-%29.html</guid><pubDate>Wed, 28 Aug 2024 10:11:47 +0000</pubDate></item><item><title> How_to_optimize_in_GPU_GEMM_(二)</title><link>https://jibinghu.github.io/post/%20How_to_optimize_in_GPU_GEMM_%28-er-%29.html</link><description>&lt;a href='https://github.com/Liu-xiandong/How_to_optimize_in_GPU'&gt; How_to_optimize_in_GPU_GEMM_(二)_评论分析&lt;/a&gt;&#13;
---&#13;
你好想问一下看起来并没有用异步的指令为什么可以实现数据预取呢&#13;
&gt; pipeline 双缓冲 pingpong操作，一个事情，都是为了实现计算和访存错开。</description><guid isPermaLink="true">https://jibinghu.github.io/post/%20How_to_optimize_in_GPU_GEMM_%28-er-%29.html</guid><pubDate>Sun, 25 Aug 2024 14:50:34 +0000</pubDate></item><item><title>海光 DCU 相关知识</title><link>https://jibinghu.github.io/post/hai-guang-%20DCU%20-xiang-guan-zhi-shi.html</link><description>&gt; 目前还是在学习阶段，把之后可能时常需要用到的技术备忘在这里。</description><guid isPermaLink="true">https://jibinghu.github.io/post/hai-guang-%20DCU%20-xiang-guan-zhi-shi.html</guid><pubDate>Fri, 23 Aug 2024 14:51:13 +0000</pubDate></item><item><title>C++模板的使用</title><link>https://jibinghu.github.io/post/C%2B%2B-mo-ban-de-shi-yong.html</link><description>模板是C++支持[参数化](https://so.csdn.net/so/search?q=%E5%8F%82%E6%95%B0%E5%8C%96&amp;spm=1001.2101.3001.7020)多态的工具，模板的参数有三种类型：类型参数、非类型参数和模板类型参数。</description><guid isPermaLink="true">https://jibinghu.github.io/post/C%2B%2B-mo-ban-de-shi-yong.html</guid><pubDate>Fri, 23 Aug 2024 07:46:25 +0000</pubDate></item><item><title>AWQ量化</title><link>https://jibinghu.github.io/post/AWQ-liang-hua.html</link><description>挑选显著权重：权重矩阵的一行作为一个单位。</description><guid isPermaLink="true">https://jibinghu.github.io/post/AWQ-liang-hua.html</guid><pubDate>Wed, 21 Aug 2024 09:51:57 +0000</pubDate></item><item><title>基座模型私有数据训练</title><link>https://jibinghu.github.io/post/ji-zuo-mo-xing-si-you-shu-ju-xun-lian.html</link><description>针对基座模型（例如大型语言模型）进行私有数据训练，以下是几种代价较小的方式：&#13;
&#13;
1. QLoRA 微调&#13;
- 概念：QLoRA（Quantized Low Rank Adaptation）是一种利用低秩矩阵分解和量化技术的微调方法，能够在模型参数显著减少的情况下，实现类似全量模型微调的效果。</description><guid isPermaLink="true">https://jibinghu.github.io/post/ji-zuo-mo-xing-si-you-shu-ju-xun-lian.html</guid><pubDate>Wed, 21 Aug 2024 09:50:57 +0000</pubDate></item><item><title>Pre-Norm&amp;Post-Norm</title><link>https://jibinghu.github.io/post/Pre-Norm%26Post-Norm.html</link><description>![](https://img2024.cnblogs.com/blog/3358182/202407/3358182-20240717110533959-1175740727.png)&#13;
&#13;
&#13;
从图中可以看出，两种不同的Transformer结构：Post-Norm Residual Unit 和 Pre-Norm Residual Unit。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Pre-Norm%26Post-Norm.html</guid><pubDate>Wed, 17 Jul 2024 03:07:42 +0000</pubDate></item><item><title>CUDA binary analysis utils</title><link>https://jibinghu.github.io/post/CUDA%20binary%20analysis%20utils.html</link><description>cuobjdump ：&#13;
cuobjdump 是 NVIDIA 提供的一个工具，用于提取和显示 CUDA 二进制文件（即 CUDA 应用程序的可执行文件）中的信，可以用来分析cubin文件和host文件。</description><guid isPermaLink="true">https://jibinghu.github.io/post/CUDA%20binary%20analysis%20utils.html</guid><pubDate>Tue, 16 Jul 2024 08:21:47 +0000</pubDate></item><item><title>C++中间件介绍</title><link>https://jibinghu.github.io/post/C%2B%2B-zhong-jian-jian-jie-shao.html</link><description>以下是对RPC、Nginx、MongoDB、MQ和HAProxy的解释：&#13;
&#13;
### 1. RPC（Remote Procedure Call）&#13;
**RPC**是一种使程序能够在不同地址空间（通常在不同计算机上）调用彼此的方法的协议。</description><guid isPermaLink="true">https://jibinghu.github.io/post/C%2B%2B-zhong-jian-jian-jie-shao.html</guid><pubDate>Tue, 18 Jun 2024 01:30:47 +0000</pubDate></item><item><title>大话 Transformer(零基础看懂论文)</title><link>https://jibinghu.github.io/post/da-hua-%20Transformer%28-ling-ji-chu-kan-dong-lun-wen-%29.html</link><description>&#13;
---&#13;
&#13;
###### 由于课程实验要求以及专业学习关系，之前学过Transformer但仅局限于会用，这次深入探讨一下Transformer以便为大模型推理加速打个基础。</description><guid isPermaLink="true">https://jibinghu.github.io/post/da-hua-%20Transformer%28-ling-ji-chu-kan-dong-lun-wen-%29.html</guid><pubDate>Sat, 15 Jun 2024 06:20:07 +0000</pubDate></item><item><title>Brain Computer Interface</title><link>https://jibinghu.github.io/post/Brain%20Computer%20Interface.html</link><description>#### Technical terms learning:&#13;
&#13;
##### Brain-Computer Interface(BCI / 脑机接口):&#13;
&#13;
**定义：**&#13;
脑机接口是在大脑与外部设备之间创建信息通道，实现两者之间直接信息交互的新型交叉技术。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Brain%20Computer%20Interface.html</guid><pubDate>Wed, 12 Jun 2024 13:36:26 +0000</pubDate></item><item><title>使用 ViT 训练 Cifar10 数据集</title><link>https://jibinghu.github.io/post/shi-yong-%20ViT%20-xun-lian-%20Cifar10%20-shu-ju-ji.html</link><description>#### 使用 ViT 训练 Cifar10 数据集&#13;
&#13;
**主要用来记录学习 ViT 中的问题帖子**&#13;
&#13;
---&#13;
&#13;
`nn.LayerNorm` 是 PyTorch 中的一个标准化层，它在神经网络中用于对输入数据进行层归一化。</description><guid isPermaLink="true">https://jibinghu.github.io/post/shi-yong-%20ViT%20-xun-lian-%20Cifar10%20-shu-ju-ji.html</guid><pubDate>Wed, 12 Jun 2024 10:27:08 +0000</pubDate></item><item><title>CUDA 矩阵乘优化分析</title><link>https://jibinghu.github.io/post/CUDA%20-ju-zhen-cheng-you-hua-fen-xi.html</link><description>#### 通过Shared Memory加速矩阵乘(Double等类型)分析&#13;
---&#13;
- [64位数据矩阵乘优化访存分析](#sector_1)&#13;
- [矩阵乘法的 CUDA 优化](#sector_2)&#13;
---&#13;
&#13;
#### 64位数据矩阵乘优化访存分析 {#sector_1}&#13;
&#13;
通过分析下面的代码，回答对应的两个问题(答案在文章结尾给出)。</description><guid isPermaLink="true">https://jibinghu.github.io/post/CUDA%20-ju-zhen-cheng-you-hua-fen-xi.html</guid><pubDate>Mon, 10 Jun 2024 12:45:09 +0000</pubDate></item><item><title>CUDA 线程布局以及内存层次</title><link>https://jibinghu.github.io/post/CUDA%20-xian-cheng-bu-ju-yi-ji-nei-cun-ceng-ci.html</link><description>### CUDA线程布局和内存层次&#13;
&#13;
&gt; [!CAUTION]&#13;
&gt; TODO :  CUDA 中 CUDA Core 硬件结构(SM/SP等)与软件层面布局对应关系及介绍&#13;
&#13;
**CUDA线程布局：**&#13;
&#13;
&lt;img src='https://img2024.cnblogs.com/blog/3358182/202405/3358182-20240514171810593-659841696.png' weight='300' height='200'&gt;&#13;
&#13;
如图所示，CUDA线程布局分为三层：网格(Grid),线程块(Block)以及线程(thread)&#13;
&#13;
&gt; [!IMPORTANT]&#13;
&gt; 在计算机中，内存的访问是一维的，线程的访问实质上也是一维的。</description><guid isPermaLink="true">https://jibinghu.github.io/post/CUDA%20-xian-cheng-bu-ju-yi-ji-nei-cun-ceng-ci.html</guid><pubDate>Wed, 05 Jun 2024 07:57:05 +0000</pubDate></item><item><title>Tensor core 详解</title><link>https://jibinghu.github.io/post/Tensor%20core%20-xiang-jie.html</link><description>## Tensor core 详解&#13;
&#13;
---&#13;
&#13;
#### Tensor Core剖析&#13;
&#13;
&gt; 在 NVIDIA 的通用 GPU 架构中，存在三种主要的核心类型：CUDA Core、Tensor Core 以及 RT Core。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Tensor%20core%20-xiang-jie.html</guid><pubDate>Tue, 04 Jun 2024 13:52:36 +0000</pubDate></item><item><title>Java+微信小程序_Web介绍</title><link>https://jibinghu.github.io/post/Java%2B-wei-xin-xiao-cheng-xu-_Web-jie-shao.html</link><description>&gt; 前言：由于课程需要，简单地对 Java 相关框架以及Java Web相关知识做简单地学习，以备他用。</description><guid isPermaLink="true">https://jibinghu.github.io/post/Java%2B-wei-xin-xiao-cheng-xu-_Web-jie-shao.html</guid><pubDate>Mon, 03 Jun 2024 14:40:27 +0000</pubDate></item><item><title>从矩阵转置看共享内存(CUDA)</title><link>https://jibinghu.github.io/post/cong-ju-zhen-zhuan-zhi-kan-gong-xiang-nei-cun-%28CUDA%29.html</link><description>### 从矩阵转置看共享内存(CUDA的使用：Bank Conflict与Memory Coalesce)&#13;
---&#13;
- [矩阵转置的几种方法：](#sector_1)&#13;
  - [矩阵转置朴素实现：](#sector_1)&#13;
  - [利用共享内存合并访存：](#sector_2)&#13;
  - [利用 padding 解决 bank conflict：](#sector_3)&#13;
  - [增加每个线程的处理元素个数：](#sector_4)&#13;
  - [向量化存取：](#sector_5)&#13;
- [矩阵转置综合应用：](#chapter_2)&#13;
  - [Float数据类型转置：](#float)&#13;
  - [Double数据类型转置：](#double)&#13;
---&#13;
&gt; 矩阵转置是一种基础的矩阵操作, 即将二维矩阵的行列进行反转，本文主要围绕行主序的二维单精度矩阵的转置考虑相关的优化。</description><guid isPermaLink="true">https://jibinghu.github.io/post/cong-ju-zhen-zhuan-zhi-kan-gong-xiang-nei-cun-%28CUDA%29.html</guid><pubDate>Mon, 03 Jun 2024 03:41:48 +0000</pubDate></item><item><title>PaperReading_ConvStencil</title><link>https://jibinghu.github.io/post/PaperReading_ConvStencil.html</link><description>##### *PAPER READING*&#13;
&#13;
**@address: https://dl.acm.org/doi/10.1145/3627535.3638476**&#13;
**@github: https://github.com/microsoft/ConvStencil**&#13;
&#13;
### ConvStencil: Transform Stencil Computation to Matrix Multiplication on Tensor Cores&#13;
&#13;
##### 关键词：&#13;
    模版计算，卷积，张量核，矩阵乘&#13;
&#13;
##### 摘要：&#13;
&#13;
文章提出了ConvStencil，通过有效地将stencil模版计算转化为在张量核Tensor Core上的矩阵计算来实现。</description><guid isPermaLink="true">https://jibinghu.github.io/post/PaperReading_ConvStencil.html</guid><pubDate>Wed, 29 May 2024 11:24:12 +0000</pubDate></item><item><title>记录侯战森的罪证！</title><link>https://jibinghu.github.io/post/ji-lu-hou-zhan-sen-de-zui-zheng-%EF%BC%81.html</link><description>#### **天地可证**，侯战森是个大傻逼&#13;
&#13;
&lt;img src='https://img2024.cnblogs.com/blog/3358182/202405/3358182-20240528232629437-1616844405.jpg'&gt;。</description><guid isPermaLink="true">https://jibinghu.github.io/post/ji-lu-hou-zhan-sen-de-zui-zheng-%EF%BC%81.html</guid><pubDate>Tue, 28 May 2024 15:27:34 +0000</pubDate></item><item><title>new </title><link>https://jibinghu.github.io/post/new%20.html</link><description>first。</description><guid isPermaLink="true">https://jibinghu.github.io/post/new%20.html</guid><pubDate>Tue, 28 May 2024 10:09:39 +0000</pubDate></item></channel></rss>